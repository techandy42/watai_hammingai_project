{"task_id":11,"text":"Write a python function to remove first and last occurrence of a given character from the string.","code":"def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ","test_list":["assert remove_Occ(\"hello\",\"l\") == \"heo\"","assert remove_Occ(\"abcda\",\"a\") == \"bcd\"","assert remove_Occ(\"PHP\",\"P\") == \"H\""],"test_setup_code":"","challenge_test_list":["assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"","assert remove_Occ(\"\",\"l\") == \"\""],"codegen_prompt":"\nQuestion:\nWrite a python function to remove first and last occurrence of a given character from the string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_Occ(\"hello\",\"l\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_Occ(\"hello\",\"l\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence == -1 or first_occurrence == last_occurrence:\n        return s.replace(char, '', 1) if first_occurrence != -1 else s\n    \n    result = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return result","token_probability":0.0253897612}
{"task_id":12,"text":"Write a function to sort a given matrix in ascending order according to the sum of its rows.","code":"def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result","test_list":["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]","assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]","assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix","token_probability":0.5013606498}
{"task_id":13,"text":"Write a function to count the most common words in a dictionary.","code":"from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n","test_list":["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]","assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]","assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to count the most common words in a dictionary.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_common(words):\n    from collections import Counter\n    word_count = Counter(words)\n    most_common = word_count.most_common()\n    return most_common","token_probability":0.4283217236}
{"task_id":14,"text":"Write a python function to find the volume of a triangular prism.","code":"def find_Volume(l,b,h) : \r\n    return ((l * b * h) \/ 2) ","test_list":["assert find_Volume(10,8,6) == 240","assert find_Volume(3,2,2) == 6","assert find_Volume(1,2,1) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the volume of a triangular prism.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_Volume(10,8,6)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_Volume(10,8,6):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_Volume(base, height, length):\n    area_of_base = 0.5 * base * height\n    volume = area_of_base * length\n    return volume","token_probability":0.5865155114}
{"task_id":15,"text":"Write a function to split a string at lowercase letters.","code":"import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))","test_list":["assert split_lowerstring(\"AbCd\")==['bC','d']","assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']","assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to split a string at lowercase letters.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: split_lowerstring(\"AbCd\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef split_lowerstring(\"AbCd\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def split_lowerstring(s):\n    result = []\n    current = \"\"\n    \n    for char in s:\n        if char.islower() and current:\n            result.append(current)\n            current = char\n        else:\n            current += char\n            \n    if current:\n        result.append(current)\n        \n    return result","token_probability":0.2058953499}
{"task_id":16,"text":"Write a function to find sequences of lowercase letters joined with an underscore.","code":"import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')","test_list":["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')","assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')","assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"],"test_setup_code":"","challenge_test_list":["assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"],"codegen_prompt":"\nQuestion:\nWrite a function to find sequences of lowercase letters joined with an underscore.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: text_lowercase_underscore(\"aab_cbbbc\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef text_lowercase_underscore(\"aab_cbbbc\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def text_lowercase_underscore(input_string):\n    import re\n    result = re.findall(r'[a-z]+(?:_[a-z]+)*', input_string)\n    return result","token_probability":0.3900222477}
{"task_id":17,"text":"Write a function to find the perimeter of a square.","code":"def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter","test_list":["assert square_perimeter(10)==40","assert square_perimeter(5)==20","assert square_perimeter(4)==16"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the perimeter of a square.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: square_perimeter(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef square_perimeter(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def square_perimeter(side_length):\n    result = 4 * side_length\n    return result","token_probability":0.6179371486}
{"task_id":18,"text":"Write a function to remove characters from the first string which are present in the second string.","code":"NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ","test_list":["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'","assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'","assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to remove characters from the first string which are present in the second string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_dirty_chars(\"probasscurve\", \"pros\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_dirty_chars(\"probasscurve\", \"pros\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_dirty_chars(str1, str2):\n    result = ''.join(char for char in str1 if char not in str2)\n    return result","token_probability":0.683641221}
{"task_id":19,"text":"Write a function to find whether a given array of integers contains any duplicate element.","code":"def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ","test_list":["assert test_duplicate(([1,2,3,4,5]))==False","assert test_duplicate(([1,2,3,4, 4]))==True","assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find whether a given array of integers contains any duplicate element.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: test_duplicate()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef test_duplicate():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False","token_probability":0.8626004058}
{"task_id":20,"text":"Write a function to check if the given number is woodball or not.","code":"def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x\/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False","test_list":["assert is_woodall(383) == True","assert is_woodall(254) == False","assert is_woodall(200) == False"],"test_setup_code":"","challenge_test_list":["assert is_woodall(32212254719) == True","assert is_woodall(32212254718) == False","assert is_woodall(159) == True"],"codegen_prompt":"\nQuestion:\nWrite a function to check if the given number is woodball or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_woodall(383)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_woodall(383):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_woodall(n):\n    if n < 1:\n        return False\n    \n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        k += 1","token_probability":0.0539568411}
{"task_id":21,"text":"Write a function to find m number of multiples of n.","code":"def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)","test_list":["assert multiples_of_num(4,3)== [3,6,9,12]","assert multiples_of_num(2,5)== [5,10]","assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find m number of multiples of n.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: multiples_of_num(4,3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef multiples_of_num(4,3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def multiples_of_num(n, m):\n    result = [n * i for i in range(1, m + 1)]\n    return result","token_probability":0.8953420977}
{"task_id":22,"text":"Write a function to find the first duplicate element in a given array of integers.","code":"def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate","test_list":["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4","assert find_first_duplicate([1, 2, 3, 4])==-1","assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the first duplicate element in a given array of integers.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_first_duplicate()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_first_duplicate():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None","token_probability":0.7499787643}
{"task_id":23,"text":"Write a python function to find the maximum sum of elements of list in a list of lists.","code":"def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ","test_list":["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33","assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6","assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"],"test_setup_code":"","challenge_test_list":["assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"],"codegen_prompt":"\nQuestion:\nWrite a python function to find the maximum sum of elements of list in a list of lists.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def maximum_Sum(lists):\n    max_sum = 0\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum","token_probability":0.4773364046}
{"task_id":24,"text":"Write a function to convert the given binary number to its decimal equivalent.","code":"def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary\/\/10\r\n        i += 1\r\n    return (decimal)","test_list":["assert binary_to_decimal(100) == 4","assert binary_to_decimal(1011) == 11","assert binary_to_decimal(1101101) == 109"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert the given binary number to its decimal equivalent.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: binary_to_decimal(100)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef binary_to_decimal(100):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def binary_to_decimal(binary):\n    decimal = 0\n    binary_str = str(binary)\n    length = len(binary_str)\n    \n    for i in range(length):\n        decimal += int(binary_str[length - 1 - i]) * (2 ** i)\n    \n    return decimal","token_probability":0.1741954377}
{"task_id":25,"text":"Write a python function to find the product of non-repeated elements in a given array.","code":"def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ","test_list":["assert find_Product([1,1,2,3],4) == 6","assert find_Product([1,2,3,1,1],5) == 6","assert find_Product([1,1,4,5,6],5) == 120"],"test_setup_code":"","challenge_test_list":["assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"],"codegen_prompt":"\nQuestion:\nWrite a python function to find the product of non-repeated elements in a given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_Product([1,1,2,3],4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_Product([1,1,2,3],4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_Product(arr, n):\n    from collections import Counter\n    \n    count = Counter(arr)\n    product = 1\n    found_non_repeated = False\n    \n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n            found_non_repeated = True\n            \n    return product if found_non_repeated else 0","token_probability":0.0631843847}
{"task_id":26,"text":"Write a function to check if the given tuple list has all k elements.","code":"def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ","test_list":["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True","assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True","assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"],"test_setup_code":"","challenge_test_list":["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"],"codegen_prompt":"\nQuestion:\nWrite a function to check if the given tuple list has all k elements.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_k_elements([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_k_elements([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_k_elements(tuples_list, k):\n    all_elements = set()\n    for tup in tuples_list:\n        all_elements.update(tup)\n    return len(all_elements) == k","token_probability":0.1128519348}
{"task_id":27,"text":"Write a python function to remove all digits from a list of strings.","code":"import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list","test_list":["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']","assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']","assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to remove all digits from a list of strings.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove(['4words', '3letters', '4digits'])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove(['4words', '3letters', '4digits']):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove(strings):\n    result = [s.translate(str.maketrans('', '', '0123456789')) for s in strings]\n    return result","token_probability":0.5468576764}
{"task_id":28,"text":"Write a python function to find binomial co-efficient.","code":"def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","test_list":["assert binomial_Coeff(5,2) == 10","assert binomial_Coeff(4,3) == 4","assert binomial_Coeff(3,2) == 3"],"test_setup_code":"","challenge_test_list":["assert binomial_Coeff(14,6) == 3003"],"codegen_prompt":"\nQuestion:\nWrite a python function to find binomial co-efficient.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: binomial_Coeff(5,2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef binomial_Coeff(5,2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    numerator = 1\n    denominator = 1\n    for i in range(1, k + 1):\n        numerator *= (n - i + 1)\n        denominator *= i\n    return numerator \/\/ denominator","token_probability":0.0639539727}
{"task_id":29,"text":"Write a python function to find the element occurring odd number of times.","code":"def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1","test_list":["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1","assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3","assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the element occurring odd number of times.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef get_Odd_Occurrence([1,2,3,1,2,3,1],7):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def get_Odd_Occurrence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result","token_probability":0.5276210505}
{"task_id":30,"text":"Write a python function to count all the substrings starting and ending with same characters.","code":"def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ","test_list":["assert count_Substring_With_Equal_Ends(\"abc\") == 3","assert count_Substring_With_Equal_Ends(\"abcda\") == 6","assert count_Substring_With_Equal_Ends(\"ab\") == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count all the substrings starting and ending with same characters.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_Substring_With_Equal_Ends(\"abc\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_Substring_With_Equal_Ends(\"abc\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count","token_probability":0.7455880065}
{"task_id":31,"text":"Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.","code":"def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result","test_list":["assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]","assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]","assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def func(lists, k):\n    from collections import Counter\n    from heapq import nlargest\n\n    # Flatten the list of lists and count the frequency of each integer\n    flat_list = [num for sublist in lists for num in sublist]\n    frequency = Counter(flat_list)\n\n    # Use nlargest to get the top k integers based on frequency\n    top_k = nlargest(k, frequency.keys(), key=frequency.get)\n\n    return top_k","token_probability":0.0000794168}
{"task_id":32,"text":"Write a python function to find the largest prime factor of a given number.","code":"import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n \/ i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)","test_list":["assert max_Prime_Factors(15) == 5","assert max_Prime_Factors(6) == 3","assert max_Prime_Factors(2) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the largest prime factor of a given number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_Prime_Factors(15)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_Prime_Factors(15):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_Prime_Factors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest_prime = i\n            \n    return largest_prime","token_probability":0.1944438708}
{"task_id":33,"text":"Write a python function to convert a decimal number to binary number.","code":"def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N \/\/= 2 \r\n        cnt += 1\r\n    return B_Number  ","test_list":["assert decimal_To_Binary(10) == 1010","assert decimal_To_Binary(1) == 1","assert decimal_To_Binary(20) == 10100"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to convert a decimal number to binary number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: decimal_To_Binary(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef decimal_To_Binary(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def decimal_To_Binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n \/\/ 2\n    return binary","token_probability":0.105450022}
{"task_id":34,"text":"Write a python function to find the missing number in a sorted array.","code":"def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) \/ 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ","test_list":["assert find_missing([1,2,3,5],4) == 4","assert find_missing([1,3,4,5],4) == 2","assert find_missing([1,2,3,5,6,7],5) == 4"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the missing number in a sorted array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_missing([1,2,3,5],4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_missing([1,2,3,5],4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_missing(arr, n):\n    expected_sum = n * (n + 1) \/\/ 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum","token_probability":0.3554443309}
{"task_id":35,"text":"Write a function to find the n-th rectangular number.","code":"def find_rect_num(n):\r\n  return n*(n + 1) ","test_list":["assert find_rect_num(4) == 20","assert find_rect_num(5) == 30","assert find_rect_num(6) == 42"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the n-th rectangular number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_rect_num(4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_rect_num(4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_rect_num(n):\n    result = n * (n + 1) \/\/ 2\n    return result","token_probability":0.6098260582}
{"task_id":36,"text":"Write a python function to find the nth digit in the proper fraction of two given numbers.","code":"def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p \/\/ q;  \r\n        p %= q;  \r\n    return res;  ","test_list":["assert find_Nth_Digit(1,2,1) == 5","assert find_Nth_Digit(3,5,1) == 6","assert find_Nth_Digit(5,6,5) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_Nth_Digit(1,2,1)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_Nth_Digit(1,2,1):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_Nth_Digit(numerator, denominator, n):\n    # Calculate the decimal representation of the fraction\n    fraction = numerator \/ denominator\n    # Convert the fraction to a string and find the decimal part\n    decimal_str = str(fraction).split('.')[1]\n    # Return the nth digit if it exists, otherwise return None\n    return int(decimal_str[n - 1]) if n <= len(decimal_str) else None","token_probability":0.000000573}
{"task_id":37,"text":"Write a function to sort a given mixed list of integers and strings.","code":"def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part","test_list":["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']","assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']","assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort a given mixed list of integers and strings.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sort_mixed_list(mixed_list):\n    sorted_integers = sorted([item for item in mixed_list if isinstance(item, int)])\n    sorted_strings = sorted([item for item in mixed_list if isinstance(item, str)])\n    return sorted_integers + sorted_strings","token_probability":0.1248266357}
{"task_id":38,"text":"Write a function to find the division of first even and odd number of a given list.","code":"def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even\/first_odd)","test_list":["assert div_even_odd([1,3,5,7,4,1,6,8])==4","assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2","assert div_even_odd([1,5,7,9,10])==10"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the division of first even and odd number of a given list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: div_even_odd([1,3,5,7,4,1,6,8])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef div_even_odd([1,3,5,7,4,1,6,8]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def div_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    \n    if even is not None and odd is not None:\n        return even \/ odd\n    else:\n        return None","token_probability":0.1124270064}
{"task_id":39,"text":"Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.","code":"import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")","test_list":["assert rearange_string(\"aab\")==('aba')","assert rearange_string(\"aabb\")==('abab')","assert rearange_string(\"abccdd\")==('cdabcd')"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: rearange_string(\"aab\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef rearange_string(\"aab\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def rearange_string(s):\n    from collections import Counter\n    count = Counter(s)\n    max_freq = max(count.values())\n    if max_freq > (len(s) + 1) \/\/ 2:\n        return False\n    return True","token_probability":0.2105313937}
{"task_id":40,"text":"Write a function to find frequency of the elements in a given list of lists using collections module.","code":"from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result","test_list":["assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})","assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})","assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find frequency of the elements in a given list of lists using collections module.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def freq_element(lists):\n    from collections import Counter\n    flat_list = [item for sublist in lists for item in sublist]\n    frequency = Counter(flat_list)\n    return dict(frequency)","token_probability":0.2563787359}
{"task_id":41,"text":"Write a function to filter even numbers using lambda function.","code":"def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums","test_list":["assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]","assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]","assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to filter even numbers using lambda function.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def filter_evennumbers(numbers):\n    result = list(filter(lambda x: x % 2 == 0, numbers))\n    return result","token_probability":0.9735278869}
{"task_id":42,"text":"Write a python function to find the sum of repeated elements in a given array.","code":"def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])","test_list":["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3","assert find_Sum([1,2,3,1,1],5) == 3","assert find_Sum([1,1,2],3) == 2"],"test_setup_code":"","challenge_test_list":["assert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18"],"codegen_prompt":"\nQuestion:\nWrite a python function to find the sum of repeated elements in a given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_Sum([1,2,3,1,1,4,5,6],8)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_Sum([1,2,3,1,1,4,5,6],8):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_Sum(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    repeated_sum = sum(key for key, value in count.items() if value > 1)\n    return repeated_sum","token_probability":0.0549953886}
{"task_id":43,"text":"Write a function to find sequences of lowercase letters joined with an underscore using regex.","code":"import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')","test_list":["assert text_match(\"aab_cbbbc\") == 'Found a match!'","assert text_match(\"aab_Abbbc\") == 'Not matched!'","assert text_match(\"Aaab_abbbc\") == 'Not matched!'"],"test_setup_code":"","challenge_test_list":["assert text_match(\"aab-cbbbc\") == 'Not matched!'"],"codegen_prompt":"\nQuestion:\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: text_match(\"aab_cbbbc\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef text_match(\"aab_cbbbc\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def text_match(text):\n    import re\n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    result = re.findall(pattern, text)\n    return result","token_probability":0.1012040661}
{"task_id":44,"text":"Write a function that matches a word at the beginning of a string.","code":"import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'","test_list":["assert text_match_string(\" python\")==('Not matched!')","assert text_match_string(\"python\")==('Found a match!')","assert text_match_string(\"  lang\")==('Not matched!')"],"test_setup_code":"","challenge_test_list":["assert text_match_string(\"foo\")==('Found a match!')"],"codegen_prompt":"\nQuestion:\nWrite a function that matches a word at the beginning of a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: text_match_string(\" python\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef text_match_string(\" python\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def text_match_string(string):\n    return string.startswith(\"python\")","token_probability":0.0938265386}
{"task_id":45,"text":"Write a function to find the gcd of the given array elements.","code":"def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd","test_list":["assert get_gcd([2, 4, 6, 8, 16]) == 2","assert get_gcd([1, 2, 3]) == 1","assert get_gcd([2, 4, 6, 8]) == 2 "],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the gcd of the given array elements.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: get_gcd([2, 4, 6, 8, 16])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef get_gcd([2, 4, 6, 8, 16]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def get_gcd(arr):\n    from math import gcd\n    from functools import reduce\n    return reduce(gcd, arr)","token_probability":0.7959674734}
{"task_id":46,"text":"Write a python function to determine whether all the numbers are different from each other are not.","code":"def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;","test_list":["assert test_distinct([1,5,7,9]) == True","assert test_distinct([2,4,5,5,7,9]) == False","assert test_distinct([1,2,3]) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to determine whether all the numbers are different from each other are not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: test_distinct([1,5,7,9])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef test_distinct([1,5,7,9]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))","token_probability":0.935095241}
{"task_id":47,"text":"Write a python function to find the last digit when factorial of a divides factorial of b.","code":"def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10","test_list":["assert compute_Last_Digit(2,4) == 2","assert compute_Last_Digit(6,8) == 6","assert compute_Last_Digit(1,2) == 2"],"test_setup_code":"","challenge_test_list":["assert compute_Last_Digit(3,7) == 0","assert compute_Last_Digit(20,23) == 6","assert compute_Last_Digit(1021,1024) == 4"],"codegen_prompt":"\nQuestion:\nWrite a python function to find the last digit when factorial of a divides factorial of b.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: compute_Last_Digit(2,4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef compute_Last_Digit(2,4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def compute_Last_Digit(a, b):\n    from math import factorial\n\n    if a > b:\n        return None\n\n    factorial_a = factorial(a)\n    factorial_b = factorial(b)\n\n    if factorial_b % factorial_a != 0:\n        return None\n\n    last_digit = factorial_b % 10\n    return last_digit","token_probability":0.0496019948}
{"task_id":48,"text":"Write a python function to set all odd bits of a given number.","code":"def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)","test_list":["assert odd_bit_set_number(10) == 15","assert odd_bit_set_number(20) == 21","assert odd_bit_set_number(30) == 31"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to set all odd bits of a given number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: odd_bit_set_number(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef odd_bit_set_number(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def odd_bit_set_number(num):\n    # Create a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This is the binary representation: 10101010...\n    # Set the odd bits of the given number\n    result = num | mask\n    return result","token_probability":0.0003312538}
{"task_id":49,"text":"Write a function to extract every first or specified element from a given two-dimensional list.","code":"def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ","test_list":["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]","assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]","assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to extract every first or specified element from a given two-dimensional list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def specified_element(matrix, index):\n    result = [row[index] for row in matrix if len(row) > index]\n    return result","token_probability":0.21159391}
{"task_id":50,"text":"Write a function to find the list with minimum length using lambda function.","code":"def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)","test_list":["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])","assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])","assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the list with minimum length using lambda function.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]):\n    return min([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]], key=lambda x: len(x))","token_probability":0.5724910309}
{"task_id":51,"text":"Write a function to print check if the triangle is equilateral or not.","code":"def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False","test_list":["assert check_equilateral(6,8,12)==False ","assert check_equilateral(6,6,12)==False","assert check_equilateral(6,6,6)==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to print check if the triangle is equilateral or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_equilateral(6,8,12)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_equilateral(6,8,12):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_equilateral(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a == b == c","token_probability":0.5213098078}
{"task_id":52,"text":"Write a function to caluclate area of a parallelogram.","code":"def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area","test_list":["assert parallelogram_area(10,20)==200","assert parallelogram_area(15,20)==300","assert parallelogram_area(8,9)==72"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to caluclate area of a parallelogram.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: parallelogram_area(10,20)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef parallelogram_area(10,20):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def parallelogram_area(base, height):\n    area = base * height\n    return area","token_probability":0.7771002232}
{"task_id":53,"text":"Write a python function to check whether the first and last characters of a given string are equal or not.","code":"def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ","test_list":["assert check_Equality(\"abcda\") == \"Equal\"","assert check_Equality(\"ab\") == \"Not Equal\"","assert check_Equality(\"mad\") == \"Not Equal\""],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the first and last characters of a given string are equal or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_Equality(\"abcda\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_Equality(\"abcda\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_Equality(s):\n    if len(s) == 0:\n        return False\n    return s[0] == s[-1]","token_probability":0.8341444258}
{"task_id":54,"text":"Write a function to sort the given array by using counting sort.","code":"def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list","test_list":["assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]","assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]","assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort the given array by using counting sort.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: counting_sort([1,23,4,5,6,7,8])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef counting_sort([1,23,4,5,6,7,8]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def counting_sort(arr):\n    if not arr:\n        return []\n\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n\n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n\n    for number in arr:\n        count[number - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for number in reversed(arr):\n        output[count[number - min_val] - 1] = number\n        count[number - min_val] -= 1\n\n    return output","token_probability":0.1751638787}
{"task_id":55,"text":"Write a function to find t-nth term of geometric series.","code":"import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn","test_list":["assert tn_gp(1,5,2)==16","assert tn_gp(1,5,4)==256","assert tn_gp(2,6,3)==486"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find t-nth term of geometric series.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: tn_gp(1,5,2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef tn_gp(1,5,2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def tn_gp(a, r, n):\n    result = a * (r ** (n - 1))\n    return result","token_probability":0.9177125813}
{"task_id":56,"text":"Write a python function to check if a given number is one less than twice its reverse.","code":"def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num \/\/ 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ","test_list":["assert check(70) == False","assert check(23) == False","assert check(73) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check if a given number is one less than twice its reverse.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check(70)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check(70):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1","token_probability":0.1842825939}
{"task_id":57,"text":"Write a python function to find the largest number that can be formed with the given digits.","code":"def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ","test_list":["assert find_Max_Num([1,2,3],3) == 321","assert find_Max_Num([4,5,6,1],4) == 6541","assert find_Max_Num([1,2,3,9],4) == 9321"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the largest number that can be formed with the given digits.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_Max_Num([1,2,3],3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_Max_Num([1,2,3],3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_Max_Num(digits, n):\n    # Convert digits to strings and sort them in descending order\n    sorted_digits = sorted(map(str, digits), reverse=True)\n    # Join the sorted digits to form the largest number\n    result = ''.join(sorted_digits)\n    return int(result)  # Convert the result back to an integer","token_probability":0.0018545986}
{"task_id":58,"text":"Write a python function to check whether the given two integers have opposite sign or not.","code":"def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ","test_list":["assert opposite_Signs(1,-2) == True","assert opposite_Signs(3,2) == False","assert opposite_Signs(-10,-10) == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the given two integers have opposite sign or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: opposite_Signs(1,-2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef opposite_Signs(1,-2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)","token_probability":0.8941279164}
{"task_id":59,"text":"Write a function to find the nth octagonal number.","code":"def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ","test_list":["assert is_octagonal(5) == 65","assert is_octagonal(10) == 280","assert is_octagonal(15) == 645"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the nth octagonal number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_octagonal(5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_octagonal(5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_octagonal(n):\n    result = n * (3 * n - 2)\n    return result","token_probability":0.9230321913}
{"task_id":60,"text":"Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.","code":"def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max","test_list":["assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5","assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4","assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_len_sub(arr, n):\n    if n == 0:\n        return 0\n    \n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 1\n            \n    return max_length","token_probability":0.3380772853}
{"task_id":61,"text":"Write a python function to count number of substrings with the sum of digits equal to their length.","code":"from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count","test_list":["assert count_Substrings('112112',6) == 6","assert count_Substrings('111',3) == 6","assert count_Substrings('1101112',7) == 12"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count number of substrings with the sum of digits equal to their length.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_Substrings('112112',6)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_Substrings('112112',6):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_Substrings(s, n):\n    count = 0\n    length = len(s)\n    \n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            substring = s[i:j]\n            if len(substring) == n:\n                digit_sum = sum(int(char) for char in substring)\n                if digit_sum == n:\n                    count += 1\n                    \n    return count","token_probability":0.0467523726}
{"task_id":62,"text":"Write a python function to find smallest number in a list.","code":"def smallest_num(xs):\n  return min(xs)\n","test_list":["assert smallest_num([10, 20, 1, 45, 99]) == 1","assert smallest_num([1, 2, 3]) == 1","assert smallest_num([45, 46, 50, 60]) == 45"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find smallest number in a list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: smallest_num([10, 20, 1, 45, 99])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef smallest_num([10, 20, 1, 45, 99]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest","token_probability":0.4051973747}
{"task_id":63,"text":"Write a function to find the maximum difference between available pairs in the given tuple list.","code":"def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ","test_list":["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7","assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15","assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_difference([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_difference([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_difference(tuples_list):\n    if not tuples_list or len(tuples_list) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            diff = abs(tuples_list[i][0] - tuples_list[j][0]) + abs(tuples_list[i][1] - tuples_list[j][1])\n            max_diff = max(max_diff, diff)\n    \n    return max_diff","token_probability":0.1173309696}
{"task_id":64,"text":"Write a function to sort a list of tuples using lambda.","code":"def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks","test_list":["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]","assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])","assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort a list of tuples using lambda.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: subject_marks([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef subject_marks([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def subject_marks(marks):\n    result = sorted(marks, key=lambda x: x[1])\n    return result","token_probability":0.4119633986}
{"task_id":65,"text":"Write a function of recursion list sum.","code":"def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total","test_list":["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21","assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106","assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function of recursion list sum.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: recursive_list_sum()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef recursive_list_sum():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + recursive_list_sum(lst[1:])","token_probability":0.759736809}
{"task_id":66,"text":"Write a python function to count positive numbers in a list.","code":"def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ","test_list":["assert pos_count([1,-2,3,-4]) == 2","assert pos_count([3,4,5,-1]) == 3","assert pos_count([1,2,3,4]) == 4"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count positive numbers in a list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: pos_count([1,-2,3,-4])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef pos_count([1,-2,3,-4]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def pos_count(numbers):\n    result = sum(1 for num in numbers if num > 0)\n    return result","token_probability":0.5144390721}
{"task_id":67,"text":"Write a function to find the number of ways to partition a set of bell numbers.","code":"def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ","test_list":["assert bell_number(2)==2","assert bell_number(10)==115975","assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the number of ways to partition a set of bell numbers.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: bell_number(2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef bell_number(2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]","token_probability":0.1764324189}
{"task_id":68,"text":"Write a python function to check whether the given array is monotonic or not.","code":"def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","test_list":["assert is_Monotonic([6, 5, 4, 4]) == True","assert is_Monotonic([1, 2, 2, 3]) == True","assert is_Monotonic([1, 3, 2]) == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the given array is monotonic or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_Monotonic([6, 5, 4, 4])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_Monotonic([6, 5, 4, 4]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_Monotonic(arr):\n    if not arr:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing","token_probability":0.444795162}
{"task_id":69,"text":"Write a function to check whether a list contains the given sublist or not.","code":"def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set","test_list":["assert is_sublist([2,4,3,5,7],[3,7])==False","assert is_sublist([2,4,3,5,7],[4,3])==True","assert is_sublist([2,4,3,5,7],[1,6])==False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check whether a list contains the given sublist or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_sublist([2,4,3,5,7],[3,7])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_sublist([2,4,3,5,7],[3,7]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_sublist(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False","token_probability":0.1839591864}
{"task_id":70,"text":"Write a function to find whether all the given tuples have equal length or not.","code":"def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")","test_list":["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'","assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'","assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find whether all the given tuples have equal length or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: get_equal([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef get_equal([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True","token_probability":0.3123341368}
{"task_id":71,"text":"Write a function to sort a list of elements using comb sort.","code":"def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) \/ shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums","test_list":["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]","assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]","assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort a list of elements using comb sort.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: comb_sort([5, 15, 37, 25, 79])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef comb_sort([5, 15, 37, 25, 79]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap \/ shrink)\n        if gap < 1:\n            gap = 1\n\n        sorted = True\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr","token_probability":0.2446906533}
{"task_id":72,"text":"Write a python function to check whether the given number can be represented as difference of two squares or not.","code":"def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False","test_list":["assert dif_Square(5) == True","assert dif_Square(10) == False","assert dif_Square(15) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: dif_Square(5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef dif_Square(5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def dif_Square(n):\n    if n < 0:\n        return False\n    return n % 4 == 0 or n % 4 == 1","token_probability":0.7013231429}
{"task_id":73,"text":"Write a function to split the given string with multiple delimiters by using regex.","code":"import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))","test_list":["assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']","assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']","assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to split the given string with multiple delimiters by using regex.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: multiple_split('Forces of the \\ndarkness*are coming into the play.')\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef multiple_split('Forces of the \\ndarkness*are coming into the play.'):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def multiple_split(input_string):\n    import re\n    result = re.split(r'[ \\n*]', input_string)\n    return result","token_probability":0.1942773446}
{"task_id":74,"text":"Write a function to check whether it follows the sequence given in the patterns array.","code":"def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True","test_list":["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ","assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ","assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check whether it follows the sequence given in the patterns array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_samepatterns(patterns, values):\n    if len(patterns) != len(values):\n        return False\n    \n    pattern_to_value = {}\n    value_to_pattern = {}\n    \n    for pattern, value in zip(patterns, values):\n        if pattern in pattern_to_value:\n            if pattern_to_value[pattern] != value:\n                return False\n        else:\n            pattern_to_value[pattern] = value\n        \n        if value in value_to_pattern:\n            if value_to_pattern[value] != pattern:\n                return False\n        else:\n            value_to_pattern[value] = pattern\n    \n    return True","token_probability":0.4913789824}
{"task_id":75,"text":"Write a function to find tuples which have all elements divisible by k from the given list of tuples.","code":"def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ","test_list":["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'","assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'","assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_tuples([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_tuples([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_tuples(tuples_list, k):\n    result = [tup for tup in tuples_list if all(elem % k == 0 for elem in tup)]\n    return result","token_probability":0.1776996493}
{"task_id":76,"text":"Write a python function to count the number of squares in a rectangle.","code":"def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) \/ 6 + (n - m) * m * (m + 1) \/ 2))","test_list":["assert count_Squares(4,3) == 20","assert count_Squares(2,2) == 5","assert count_Squares(1,1) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count the number of squares in a rectangle.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_Squares(4,3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_Squares(4,3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_Squares(length, width):\n    total_squares = 0\n    for size in range(1, min(length, width) + 1):\n        total_squares += (length - size + 1) * (width - size + 1)\n    return total_squares","token_probability":0.4416713044}
{"task_id":77,"text":"Write a python function to find the difference between sum of even and odd digits.","code":"def is_Diff(n): \r\n    return (n % 11 == 0) ","test_list":["assert is_Diff (12345) == False","assert is_Diff(1212112) == True","assert is_Diff(1212) == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the difference between sum of even and odd digits.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_Diff (12345)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_Diff (12345):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum - odd_sum","token_probability":0.3935263605}
{"task_id":78,"text":"Write a python function to find number of integers with odd number of set bits.","code":"def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) \/ 2\r\n    count = bin(n).count('1') \r\n    ans = n \/ 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ","test_list":["assert count_With_Odd_SetBits(5) == 3","assert count_With_Odd_SetBits(10) == 5","assert count_With_Odd_SetBits(15) == 8"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find number of integers with odd number of set bits.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_With_Odd_SetBits(5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_With_Odd_SetBits(5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 == 1:\n            count += 1\n    return count","token_probability":0.2618185744}
{"task_id":79,"text":"Write a python function to check whether the length of the word is odd or not.","code":"def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False","test_list":["assert word_len(\"Hadoop\") == False","assert word_len(\"great\") == True","assert word_len(\"structure\") == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the length of the word is odd or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: word_len(\"Hadoop\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef word_len(\"Hadoop\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def word_len(word):\n    return len(word) % 2 != 0","token_probability":0.7991732963}
{"task_id":80,"text":"Write a function to find the nth tetrahedral number.","code":"def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) \/ 6","test_list":["assert tetrahedral_number(5) == 35.0","assert tetrahedral_number(6) == 56.0","assert tetrahedral_number(7) == 84.0"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the nth tetrahedral number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: tetrahedral_number(5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef tetrahedral_number(5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def tetrahedral_number(n):\n    result = (n * (n + 1) * (n + 2)) \/\/ 6\n    return result","token_probability":0.762833793}
{"task_id":81,"text":"Write a function to zip the two given tuples.","code":"def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ","test_list":["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]","assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]","assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to zip the two given tuples.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: zip_tuples()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef zip_tuples():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def zip_tuples(tuple1, tuple2):\n    result = tuple(zip(tuple1, tuple2))\n    return result","token_probability":0.9908717653}
{"task_id":82,"text":"Write a function to find the volume of a sphere.","code":"import math\r\ndef volume_sphere(r):\r\n  volume=(4\/3)*math.pi*r*r*r\r\n  return volume","test_list":["assert volume_sphere(10)==4188.790204786391","assert volume_sphere(25)==65449.84694978735","assert volume_sphere(20)==33510.32163829113"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the volume of a sphere.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: volume_sphere(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef volume_sphere(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def volume_sphere(radius):\n    import math\n    result = (4\/3) * math.pi * (radius ** 3)\n    return result","token_probability":0.6240609441}
{"task_id":83,"text":"Write a python function to find the character made by adding all the characters of the given string.","code":"def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)","test_list":["assert get_Char(\"abc\") == \"f\"","assert get_Char(\"gfg\") == \"t\"","assert get_Char(\"ab\") == \"c\""],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the character made by adding all the characters of the given string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: get_Char(\"abc\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef get_Char(\"abc\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def get_Char(s):\n    result = chr(sum(ord(char) for char in s))\n    return result","token_probability":0.8129970976}
{"task_id":84,"text":"Write a function to find the n-th number in newman conway sequence.","code":"def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))","test_list":["assert sequence(10) == 6","assert sequence(2) == 1","assert sequence(3) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the n-th number in newman conway sequence.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sequence(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sequence(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sequence(n):\n    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return n\n    result = [0] * (n + 1)\n    result[1] = 1\n    result[2] = 2\n    for i in range(3, n + 1):\n        result[i] = result[result[i - 1]] + result[i - result[i - 1]]\n    return result[n]","token_probability":0.0947535047}
{"task_id":85,"text":"Write a function to find the surface area of a sphere.","code":"import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea","test_list":["assert surfacearea_sphere(10)==1256.6370614359173","assert surfacearea_sphere(15)==2827.4333882308138","assert surfacearea_sphere(20)==5026.548245743669"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the surface area of a sphere.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: surfacearea_sphere(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef surfacearea_sphere(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def surfacearea_sphere(radius):\n    import math\n    result = 4 * math.pi * (radius ** 2)\n    return result","token_probability":0.4088043207}
{"task_id":86,"text":"Write a function to find nth centered hexagonal number.","code":"def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1","test_list":["assert centered_hexagonal_number(10) == 271","assert centered_hexagonal_number(2) == 7","assert centered_hexagonal_number(9) == 217"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find nth centered hexagonal number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: centered_hexagonal_number(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef centered_hexagonal_number(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def centered_hexagonal_number(n):\n    result = n * (2 * n - 1)\n    return result","token_probability":0.4715077831}
{"task_id":87,"text":"Write a function to merge three dictionaries into a single expression.","code":"import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict","test_list":["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}","assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}","assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to merge three dictionaries into a single expression.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}","token_probability":0.8122266039}
{"task_id":88,"text":"Write a function to get the frequency of the elements in a list.","code":"import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count","test_list":["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ","assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ","assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to get the frequency of the elements in a list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def freq_count(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency","token_probability":0.7266995258}
{"task_id":89,"text":"Write a function to find the closest smaller number than n.","code":"def closest_num(N):\r\n  return (N - 1)","test_list":["assert closest_num(11) == 10","assert closest_num(7) == 6","assert closest_num(12) == 11"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the closest smaller number than n.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: closest_num(11)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef closest_num(11):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def closest_num(n):\n    if n <= 0:\n        return None\n    return n - 1","token_probability":0.4520089328}
{"task_id":90,"text":"Write a python function to find the length of the longest word.","code":"def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max","test_list":["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7","assert len_log([\"a\",\"ab\",\"abc\"]) == 3","assert len_log([\"small\",\"big\",\"tall\"]) == 5"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the length of the longest word.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: len_log([\"python\",\"PHP\",\"bigdata\"])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef len_log([\"python\",\"PHP\",\"bigdata\"]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def len_log(words):\n    longest_length = 0\n    for word in words:\n        if len(word) > longest_length:\n            longest_length = len(word)\n    return longest_length","token_probability":0.3487973545}
{"task_id":91,"text":"Write a function to check if a substring is present in a given list of string values.","code":"def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False","test_list":["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True","assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False","assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check if a substring is present in a given list of string values.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_substring(strings, substring):\n    result = any(substring in s for s in strings)\n    return result","token_probability":0.3076320214}
{"task_id":92,"text":"Write a function to check whether the given number is undulating or not.","code":"def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True","test_list":["assert is_undulating(\"1212121\") == True","assert is_undulating(\"1991\") == False","assert is_undulating(\"121\") == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check whether the given number is undulating or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_undulating(\"1212121\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_undulating(\"1212121\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_undulating(s):\n    for i in range(1, len(s) - 1):\n        if s[i] == s[i - 1] or s[i] == s[i + 1]:\n            return False\n    return True if len(s) > 1 else False","token_probability":0.3825662306}
{"task_id":93,"text":"Write a function to calculate the value of 'a' to the power 'b'.","code":"def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)","test_list":["assert power(3,4) == 81","assert power(2,3) == 8","assert power(5,5) == 3125"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate the value of 'a' to the power 'b'.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: power(3,4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef power(3,4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def power(a, b):\n    result = a ** b\n    return result","token_probability":0.9998524223}
{"task_id":94,"text":"Write a function to extract the index minimum value record from the given tuples.","code":"from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ","test_list":["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'","assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'","assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to extract the index minimum value record from the given tuples.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: index_minimum([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef index_minimum([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def index_minimum(tuples):\n    if not tuples:\n        return None\n    min_index = 0\n    for i in range(1, len(tuples)):\n        if tuples[i] < tuples[min_index]:\n            min_index = i\n    return min_index","token_probability":0.3768247617}
{"task_id":95,"text":"Write a python function to find the minimum length of sublist.","code":"def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ","test_list":["assert Find_Min_Length([[1],[1,2]]) == 1","assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2","assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the minimum length of sublist.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: Find_Min_Length([[1],[1,2]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef Find_Min_Length([[1],[1,2]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length","token_probability":0.1938575019}
{"task_id":96,"text":"Write a python function to find the number of divisors of a given integer.","code":"def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x","test_list":["assert divisor(15) == 4 ","assert divisor(12) == 6","assert divisor(9) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the number of divisors of a given integer.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: divisor(15)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef divisor(15):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count","token_probability":0.8997668312}
{"task_id":97,"text":"Write a function to find frequency count of list of lists.","code":"def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n","test_list":["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}","assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}","assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find frequency count of list of lists.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def frequency_lists(lists):\n    from collections import Counter\n    frequency = Counter()\n    for sublist in lists:\n        frequency.update(sublist)\n    return dict(frequency)","token_probability":0.2458021277}
{"task_id":98,"text":"Write a function to multiply all the numbers in a list and divide with the length of the list.","code":"def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total\/len(numbers) ","test_list":["assert multiply_num((8, 2, 3, -1, 7))==-67.2","assert multiply_num((-10,-20,-30))==-2000.0","assert multiply_num((19,15,18))==1710.0"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: multiply_num()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef multiply_num():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product \/ len(numbers)","token_probability":0.3748498095}
{"task_id":99,"text":"Write a function to convert the given decimal number to its binary equivalent.","code":"def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ","test_list":["assert decimal_to_binary(8) == '1000'","assert decimal_to_binary(18) == '10010'","assert decimal_to_binary(7) == '111' "],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert the given decimal number to its binary equivalent.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: decimal_to_binary(8)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef decimal_to_binary(8):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n \/\/= 2\n    return binary","token_probability":0.1255767466}
{"task_id":100,"text":"Write a function to find the next smallest palindrome of a specified number.","code":"import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i","test_list":["assert next_smallest_palindrome(99)==101","assert next_smallest_palindrome(1221)==1331","assert next_smallest_palindrome(120)==121"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the next smallest palindrome of a specified number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: next_smallest_palindrome(99)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef next_smallest_palindrome(99):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num -= 1\n    while num >= 0:\n        if is_palindrome(num):\n            return num\n        num -= 1\n\n    return None  # In case there's no smaller palindrome, though this won't happen for positive integers.","token_probability":0.0002073376}
{"task_id":101,"text":"Write a function to find the kth element in the given array.","code":"def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]","test_list":["assert kth_element([12,3,5,7,19], 5, 2) == 3","assert kth_element([17,24,8,23], 4, 3) == 8","assert kth_element([16,21,25,36,4], 5, 4) == 36"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the kth element in the given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: kth_element([12,3,5,7,19], 5, 2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef kth_element([12,3,5,7,19], 5, 2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k - 1] if k <= n else None","token_probability":0.3238994336}
{"task_id":102,"text":"Write a function to convert snake case string to camel case string.","code":"def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))","test_list":["assert snake_to_camel('python_program')=='PythonProgram'","assert snake_to_camel('python_language')==('PythonLanguage')","assert snake_to_camel('programming_language')==('ProgrammingLanguage')"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert snake case string to camel case string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: snake_to_camel('python_program')\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef snake_to_camel('python_program'):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])","token_probability":0.2595030337}
{"task_id":103,"text":"Write a function to find eulerian number a(n, m).","code":"def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","test_list":["assert eulerian_num(3, 1) == 4","assert eulerian_num(4, 1) == 11","assert eulerian_num(5, 3) == 26"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find eulerian number a(n, m).\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: eulerian_num(3, 1)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef eulerian_num(3, 1):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def eulerian_num(n, m):\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                A[i][j] += (i - j + 1) * A[i - 1][j - 1]\n            A[i][j] += (j + 1) * A[i - 1][j]\n\n    return A[n][m]","token_probability":0.0867532678}
{"task_id":104,"text":"Write a function to sort each sublist of strings in a given list of lists using lambda function.","code":"def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r","test_list":["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]","assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]","assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sort_sublists()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sort_sublists():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sort_sublists(lists):\n    result = [sorted(sublist, key=lambda x: x) for sublist in lists]\n    return result","token_probability":0.4833868838}
{"task_id":105,"text":"Write a python function to count true booleans in the given list.","code":"def count(lst):   \r\n    return sum(lst) ","test_list":["assert count([True,False,True]) == 2","assert count([False,False]) == 0","assert count([True,True,True]) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count true booleans in the given list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count([True,False,True])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count([True,False,True]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count(bool_list):\n    result = sum(bool_list)\n    return result","token_probability":0.4271758968}
{"task_id":106,"text":"Write a function to add the given list to the given tuples.","code":"def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ","test_list":["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)","assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)","assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to add the given list to the given tuples.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: add_lists([5, 6, 7], )\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef add_lists([5, 6, 7], ):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def add_lists(lst, ):\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    result = [t + (x,) for t in tuples for x in lst]\n    return result","token_probability":0.1041537799}
{"task_id":107,"text":"Write a python function to count hexadecimal numbers for a given range.","code":"def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k \/\/ 16;  \r\n    return count;  ","test_list":["assert count_Hexadecimal(10,15) == 6","assert count_Hexadecimal(2,4) == 0","assert count_Hexadecimal(15,16) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count hexadecimal numbers for a given range.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_Hexadecimal(10,15)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_Hexadecimal(10,15):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_Hexadecimal(start, end):\n    hex_numbers = [hex(i) for i in range(start, end + 1)]\n    return hex_numbers","token_probability":0.5035254507}
{"task_id":108,"text":"Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.","code":"import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)","test_list":["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]","assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]","assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def merge_sorted_list(*lists):\n    import heapq\n    \n    merged_iterator = heapq.merge(*[sorted(lst) for lst in lists])\n    return list(merged_iterator)","token_probability":0.0891189489}
{"task_id":109,"text":"Write a python function to find the count of rotations of a binary string with odd value.","code":"def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ","test_list":["assert odd_Equivalent(\"011001\",6) == 3","assert odd_Equivalent(\"11011\",5) == 4","assert odd_Equivalent(\"1010\",4) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the count of rotations of a binary string with odd value.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: odd_Equivalent(\"011001\",6)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef odd_Equivalent(\"011001\",6):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def odd_Equivalent(binary_string, length):\n    count = 0\n    for i in range(length):\n        rotated_string = binary_string[i:] + binary_string[:i]\n        if int(rotated_string, 2) % 2 == 1:\n            count += 1\n    return count","token_probability":0.3066907835}
{"task_id":110,"text":"Write a function to extract the ranges that are missing from the given list with the given start range and end range values.","code":"def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ","test_list":["assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]","assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]","assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: extract_missing([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef extract_missing([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def extract_missing(ranges, start, end):\n    missing_ranges = []\n    current = start\n    \n    for r in sorted(ranges):\n        if r[0] > current:\n            missing_ranges.append((current, r[0] - 1))\n        current = max(current, r[1] + 1)\n    \n    if current <= end:\n        missing_ranges.append((current, end))\n    \n    return missing_ranges","token_probability":0.0700982958}
{"task_id":111,"text":"Write a function to find common elements in given nested lists. * list item * list item * list item * list item","code":"def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result","test_list":["assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]","assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]","assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    common_elements = set(nested_lists[0])\n    \n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    \n    return list(common_elements)","token_probability":0.4567715011}
{"task_id":112,"text":"Write a python function to find the perimeter of a cylinder.","code":"def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ","test_list":["assert perimeter(2,4) == 12","assert perimeter(1,2) == 6","assert perimeter(3,1) == 8"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the perimeter of a cylinder.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: perimeter(2,4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef perimeter(2,4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def perimeter(radius, height):\n    import math\n    circumference = 2 * math.pi * radius\n    return circumference + 2 * height","token_probability":0.1286789521}
{"task_id":113,"text":"Write a function to check if a string represents an integer or not.","code":"def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False","test_list":["assert check_integer(\"python\")==False","assert check_integer(\"1\")==True","assert check_integer(\"12345\")==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check if a string represents an integer or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_integer(\"python\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_integer(\"python\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_integer(s):\n    if s.isdigit() or (s.startswith('-') and s[1:].isdigit()):\n        return True\n    return False","token_probability":0.3549726991}
{"task_id":114,"text":"Write a function to assign frequency to each tuple in the given tuple list.","code":"from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ","test_list":["assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'","assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'","assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to assign frequency to each tuple in the given tuple list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: assign_freq([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef assign_freq([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def assign_freq(tuples_list):\n    frequency = {}\n    for item in tuples_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    result = [(item, frequency[item]) for item in tuples_list]\n    return result","token_probability":0.2240301225}
{"task_id":115,"text":"Write a function to check whether all dictionaries in a list are empty or not.","code":"def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit","test_list":["assert empty_dit([{},{},{}])==True","assert empty_dit([{1,2},{},{}])==False","assert empty_dit({})==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check whether all dictionaries in a list are empty or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: empty_dit([{},{},{}])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef empty_dit([{},{},{}]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def empty_dit(dicts):\n    return all(isinstance(d, dict) and not d for d in dicts)","token_probability":0.1841895153}
{"task_id":116,"text":"Write a function to convert a given tuple of positive integers into an integer.","code":"def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result","test_list":["assert tuple_to_int((1,2,3))==123","assert tuple_to_int((4,5,6))==456","assert tuple_to_int((5,6,7))==567"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert a given tuple of positive integers into an integer.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: tuple_to_int()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef tuple_to_int():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def tuple_to_int(t):\n    result = int(''.join(map(str, t)))\n    return result","token_probability":0.3283168731}
{"task_id":117,"text":"Write a function to convert all possible convertible elements in the list to float.","code":"def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ","test_list":["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'","assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'","assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert all possible convertible elements in the list to float.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: list_to_float( [)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef list_to_float( [):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def list_to_float(lst):\n    result = []\n    for item in lst:\n        try:\n            result.append(float(item))\n        except (ValueError, TypeError):\n            result.append(item)\n    return result","token_probability":0.8417964153}
{"task_id":118,"text":"[link text](https:\/\/ [link text](https:\/\/ [link text](https:\/\/)))write a function to convert a string to a list.","code":"def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst","test_list":["assert string_to_list(\"python programming\")==['python','programming']","assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']","assert string_to_list(\"write a program\")==['write','a','program']"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\n[link text](https:\/\/ [link text](https:\/\/ [link text](https:\/\/)))write a function to convert a string to a list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: string_to_list(\"python programming\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef string_to_list(\"python programming\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def string_to_list(input_string):\n    result = input_string.split()\n    return result","token_probability":0.7167180695}
{"task_id":119,"text":"Write a python function to find the element that appears only once in a sorted array.","code":"def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)","test_list":["assert search([1,1,2,2,3],5) == 3","assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8","assert search([1,2,2,3,3,4,4],7) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the element that appears only once in a sorted array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: search([1,1,2,2,3],5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef search([1,1,2,2,3],5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def search(arr, n):\n    left, right = 0, n - 1\n    \n    while left < right:\n        mid = left + (right - left) \/\/ 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return arr[left]","token_probability":0.1427134526}
{"task_id":120,"text":"Write a function to find the maximum product from the pairs of tuples within a given list.","code":"def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max","test_list":["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36","assert max_product_tuple([(10,20), (15,2), (5,10)] )==200","assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the maximum product from the pairs of tuples within a given list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_product_tuple([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_product_tuple([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            product = tuples_list[i][0] * tuples_list[i][1] * tuples_list[j][0] * tuples_list[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product","token_probability":0.3362962429}
{"task_id":121,"text":"Write a function to find the triplet with sum of the given array","code":"def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)","test_list":["assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True","assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False","assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the triplet with sum of the given array\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_triplet(arr, a, b, c):\n    target_sum = a + b + c\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False","token_probability":0.3761795136}
{"task_id":122,"text":"Write a function to find n\u2019th smart number.","code":"MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ","test_list":["assert smartNumber(1) == 30","assert smartNumber(50) == 273","assert smartNumber(1000) == 2664"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find n\u2019th smart number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: smartNumber(1)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef smartNumber(1):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def smartNumber(n):\n    smart_numbers = []\n    i = 1\n    while len(smart_numbers) < n:\n        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n            smart_numbers.append(i)\n        i += 1\n    return smart_numbers[-1]","token_probability":0.0698546671}
{"task_id":123,"text":"Write a function to sum all amicable numbers from 1 to a specified number.","code":"def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)","test_list":["assert amicable_numbers_sum(999)==504","assert amicable_numbers_sum(9999)==31626","assert amicable_numbers_sum(99)==0"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: amicable_numbers_sum(999)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef amicable_numbers_sum(999):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        total = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                total += i\n                if i != num \/\/ i:\n                    total += num \/\/ i\n        return total\n\n    amicable_numbers = set()\n    \n    for i in range(2, n + 1):\n        if i not in amicable_numbers:\n            partner = sum_of_divisors(i)\n            if partner != i and sum_of_divisors(partner) == i:\n                amicable_numbers.add(i)\n                amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)","token_probability":0.0363674154}
{"task_id":124,"text":"Write a function to get the angle of a complex number.","code":"import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle","test_list":["assert angle_complex(0,1j)==1.5707963267948966 ","assert angle_complex(2,1j)==0.4636476090008061","assert angle_complex(0,2j)==1.5707963267948966"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to get the angle of a complex number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: angle_complex(0,1j)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef angle_complex(0,1j):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def angle_complex(z):\n    import cmath\n    return cmath.phase(z)","token_probability":0.6259867586}
{"task_id":125,"text":"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.","code":"def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0","test_list":["assert find_length(\"11000010001\", 11) == 6","assert find_length(\"10111\", 5) == 1","assert find_length(\"11011101100101\", 14) == 2 "],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_length(\"11000010001\", 11)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_length(\"11000010001\", 11):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_length(s, n):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in s:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff < 0:\n            current_diff = 0\n        \n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff","token_probability":0.2217870495}
{"task_id":126,"text":"Write a python function to find the sum of common divisors of two given numbers.","code":"def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum","test_list":["assert sum(10,15) == 6","assert sum(100,150) == 93","assert sum(4,6) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the sum of common divisors of two given numbers.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sum(10,15)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sum(10,15):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_gcd = gcd(a, b)\n    common_divisors_sum = sum(i for i in range(1, common_gcd + 1) if common_gcd % i == 0)\n    \n    return common_divisors_sum","token_probability":0.2058882322}
{"task_id":127,"text":"Write a function to multiply two integers without using the * operator in python.","code":"def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)","test_list":["assert multiply_int(10,20)==200","assert multiply_int(5,10)==50","assert multiply_int(4,8)==32"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to multiply two integers without using the * operator in python.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: multiply_int(10,20)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef multiply_int(10,20):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def multiply_int(a, b):\n    result = 0\n    for _ in range(abs(b)):\n        result += abs(a)\n    if (a < 0) ^ (b < 0):\n        result = -result\n    return result","token_probability":0.4646615676}
{"task_id":128,"text":"Write a function to shortlist words that are longer than n from a given list of words.","code":"def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t","test_list":["assert long_words(3,\"python is a programming language\")==['python','programming','language']","assert long_words(2,\"writing a program\")==['writing','program']","assert long_words(5,\"sorting list\")==['sorting']"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to shortlist words that are longer than n from a given list of words.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: long_words(3,\"python is a programming language\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef long_words(3,\"python is a programming language\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def long_words(n, sentence):\n    words = sentence.split()\n    result = [word for word in words if len(word) > n]\n    return result","token_probability":0.7886927885}
{"task_id":129,"text":"Write a function to calculate magic square.","code":"def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True","test_list":["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True","assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True","assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate magic square.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def magic_square_test(square):\n    n = len(square)\n    magic_sum = n * (n**2 + 1) \/\/ 2\n\n    # Check rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(square[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(square[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(square[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True","token_probability":0.2989880385}
{"task_id":130,"text":"Write a function to find the item with maximum frequency in a given list.","code":"from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result","test_list":["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)","assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)","assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the item with maximum frequency in a given list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_occurrences(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = max(frequency, key=frequency.get)\n    return max_item","token_probability":0.5236647078}
{"task_id":131,"text":"Write a python function to reverse only the vowels of a given string.","code":"def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string","test_list":["assert reverse_vowels(\"Python\") == \"Python\"","assert reverse_vowels(\"USA\") == \"ASU\"","assert reverse_vowels(\"ab\") == \"ab\""],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to reverse only the vowels of a given string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: reverse_vowels(\"Python\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef reverse_vowels(\"Python\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n            \n    return ''.join(s_list)","token_probability":0.1571289413}
{"task_id":132,"text":"Write a function to convert tuple to a string.","code":"def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str","test_list":["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")","assert tup_string(('p','y','t','h','o','n'))==(\"python\")","assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert tuple to a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: tup_string()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef tup_string():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def tup_string(tup):\n    result = ''.join(map(str, tup))\n    return result","token_probability":0.9135699681}
{"task_id":133,"text":"Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.","code":"def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)","test_list":["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32","assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52","assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sum_negativenum(numbers):\n    result = sum(filter(lambda x: x < 0, numbers))\n    return result","token_probability":0.9222006936}
{"task_id":134,"text":"Write a python function to check whether the last element of given array is even or odd after performing an operation p times.","code":"def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ","test_list":["assert check_last([5,7,10],3,1) == \"ODD\"","assert check_last([2,3],2,3) == \"EVEN\"","assert check_last([1,2,3],3,1) == \"ODD\""],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_last([5,7,10],3,1)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_last([5,7,10],3,1):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_last(arr, p, x):\n    for _ in range(p):\n        arr[-1] += x\n    return \"even\" if arr[-1] % 2 == 0 else \"odd\"","token_probability":0.2519702409}
{"task_id":135,"text":"Write a function to find the nth hexagonal number.","code":"def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ","test_list":["assert hexagonal_num(10) == 190","assert hexagonal_num(5) == 45","assert hexagonal_num(7) == 91"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the nth hexagonal number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: hexagonal_num(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef hexagonal_num(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def hexagonal_num(n):\n    result = n * (2 * n - 1)\n    return result","token_probability":0.9971041446}
{"task_id":136,"text":"Write a function to calculate electricity bill.","code":"def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total","test_list":["assert cal_electbill(75)==246.25","assert cal_electbill(265)==1442.75","assert cal_electbill(100)==327.5"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate electricity bill.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: cal_electbill(75)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef cal_electbill(75):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def cal_electbill(units):\n    if units <= 100:\n        bill = units * 1.5\n    elif units <= 300:\n        bill = (100 * 1.5) + ((units - 100) * 2.5)\n    else:\n        bill = (100 * 1.5) + (200 * 2.5) + ((units - 300) * 3.5)\n    \n    return bill","token_probability":0.0765384103}
{"task_id":137,"text":"Write a function to find the ration of zeroes in an array of integers.","code":"from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1\/n,2)","test_list":["assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15","assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00","assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the ration of zeroes in an array of integers.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def zero_count(arr):\n    if not arr:\n        return 0\n    zeroes = arr.count(0)\n    ratio = zeroes \/ len(arr)\n    return ratio","token_probability":0.2102722532}
{"task_id":138,"text":"Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.","code":"def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True","test_list":["assert is_Sum_Of_Powers_Of_Two(10) == True","assert is_Sum_Of_Powers_Of_Two(7) == False","assert is_Sum_Of_Powers_Of_Two(14) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_Sum_Of_Powers_Of_Two(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_Sum_Of_Powers_Of_Two(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0 or n == 1 or (n > 1 and (n & (n - 1)) != 0)","token_probability":0.0029146704}
{"task_id":139,"text":"Write a function to find the circumference of a circle.","code":"def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter","test_list":["assert circle_circumference(10)==62.830000000000005","assert circle_circumference(5)==31.415000000000003","assert circle_circumference(4)==25.132"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the circumference of a circle.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: circle_circumference(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef circle_circumference(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def circle_circumference(radius):\n    pi = 3.14159\n    circumference = 2 * pi * radius\n    return circumference","token_probability":0.6367231042}
{"task_id":140,"text":"Write a function to extract elements that occur singly in the given tuple list.","code":"def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ","test_list":["assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]","assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]","assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to extract elements that occur singly in the given tuple list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: extract_singly([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef extract_singly([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def extract_singly(tuple_list):\n    from collections import Counter\n    flat_list = [item for tup in tuple_list for item in tup]\n    count = Counter(flat_list)\n    result = [item for item in count if count[item] == 1]\n    return result","token_probability":0.0505013353}
{"task_id":141,"text":"Write a function to sort a list of elements using pancake sort.","code":"def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums","test_list":["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]","assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]","assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort a list of elements using pancake sort.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: pancake_sort([15, 79, 25, 38, 69])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef pancake_sort([15, 79, 25, 38, 69]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def pancake_sort(arr):\n    def flip(sub_arr, k):\n        return sub_arr[:k][::-1] + sub_arr[k:]\n\n    def find_max_index(sub_arr, n):\n        max_index = 0\n        for i in range(1, n):\n            if sub_arr[i] > sub_arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        max_index = find_max_index(arr, size)\n\n        if max_index != size - 1:\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            arr = flip(arr, size)\n\n    return arr","token_probability":0.0601847628}
{"task_id":142,"text":"Write a function to count the same pair in three given lists.","code":"def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result","test_list":["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3","assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4","assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to count the same pair in three given lists.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_samepair(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count","token_probability":0.5108208059}
{"task_id":143,"text":"Write a function to find number of lists present in the given tuple.","code":"def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ","test_list":["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2","assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3","assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find number of lists present in the given tuple.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_lists()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_lists():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count","token_probability":0.4619941066}
{"task_id":144,"text":"Write a python function to find the sum of absolute differences in all pairs of the given array.","code":"def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum","test_list":["assert sum_Pairs([1,8,9,15,16],5) == 74","assert sum_Pairs([1,2,3,4],4) == 10","assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sum_Pairs([1,8,9,15,16],5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sum_Pairs([1,8,9,15,16],5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum","token_probability":0.8602056516}
{"task_id":145,"text":"Write a python function to find the maximum difference between any two elements in a given array.","code":"def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ","test_list":["assert max_Abs_Diff((2,1,5,3),4) == 4","assert max_Abs_Diff((9,3,2,5,1),5) == 8","assert max_Abs_Diff((3,2,1),3) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the maximum difference between any two elements in a given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_Abs_Diff()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_Abs_Diff():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val","token_probability":0.2354466433}
{"task_id":146,"text":"Write a function to find the ascii value of total characters in a string.","code":"def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])","test_list":["assert ascii_value_string(\"python\")==112","assert ascii_value_string(\"Program\")==80","assert ascii_value_string(\"Language\")==76"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the ascii value of total characters in a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: ascii_value_string(\"python\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef ascii_value_string(\"python\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def ascii_value_string(s):\n    total_ascii = sum(ord(char) for char in s)\n    return total_ascii","token_probability":0.6256750665}
{"task_id":147,"text":"Write a function to find the maximum total path sum in the given triangle.","code":"def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]","test_list":["assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14","assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ","assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the maximum total path sum in the given triangle.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def max_path_sum(triangle, row, col):\n    if row == 0:\n        return triangle[0][0]\n    \n    for r in range(row + 1):\n        for c in range(r + 1):\n            if r == 0 and c == 0:\n                continue\n            left_parent = triangle[r - 1][c - 1] if c > 0 else 0\n            right_parent = triangle[r - 1][c] if c < r else 0\n            triangle[r][c] += max(left_parent, right_parent)\n    \n    return triangle[row][col]","token_probability":0.0034395918}
{"task_id":148,"text":"Write a function to divide a number into two parts such that the sum of digits is maximum.","code":"def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x \/\/= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ","test_list":["assert sum_digits_twoparts(35)==17","assert sum_digits_twoparts(7)==7","assert sum_digits_twoparts(100)==19"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sum_digits_twoparts(35)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sum_digits_twoparts(35):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sum_digits_twoparts(n):\n    str_n = str(n)\n    max_sum = 0\n    best_pair = (0, 0)\n\n    for i in range(1, len(str_n)):\n        part1 = int(str_n[:i])\n        part2 = int(str_n[i:])\n        digit_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n\n        if digit_sum > max_sum:\n            max_sum = digit_sum\n            best_pair = (part1, part2)\n\n    return best_pair","token_probability":0.0224661178}
{"task_id":149,"text":"Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.","code":"def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result","test_list":["assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6","assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3","assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return []\n    \n    longest_subseq = []\n    current_subseq = [arr[0]]\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_subseq.append(arr[i])\n        else:\n            if len(current_subseq) > len(longest_subseq):\n                longest_subseq = current_subseq\n            current_subseq = [arr[i]]\n    \n    if len(current_subseq) > len(longest_subseq):\n        longest_subseq = current_subseq\n    \n    return longest_subseq","token_probability":0.1715294102}
{"task_id":150,"text":"Write a python function to find whether the given number is present in the infinite sequence or not.","code":"def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False","test_list":["assert does_Contain_B(1,7,3) == True","assert does_Contain_B(1,-3,5) == False","assert does_Contain_B(3,2,5) == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find whether the given number is present in the infinite sequence or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: does_Contain_B(1,7,3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef does_Contain_B(1,7,3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def does_Contain_B(a, b, c):\n    current = a\n    while current <= b:\n        if current == c:\n            return True\n        current += 1\n    return False","token_probability":0.1866976947}
{"task_id":151,"text":"Write a python function to check whether the given number is co-prime or not.","code":"def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1","test_list":["assert is_coprime(17,13) == True","assert is_coprime(15,21) == False","assert is_coprime(25,45) == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the given number is co-prime or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_coprime(17,13)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_coprime(17,13):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_coprime(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    return gcd(a, b) == 1","token_probability":0.9441120788}
{"task_id":152,"text":"Write a function to sort the given array by using merge sort.","code":"def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)\/\/2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n","test_list":["assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]","assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]","assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to sort the given array by using merge sort.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef merge_sort([3, 4, 2, 6, 5, 7, 1, 9]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) \/\/ 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr","token_probability":0.3850587295}
{"task_id":153,"text":"Write a function to find the vertex of a parabola.","code":"def parabola_vertex(a, b, c): \r\n  vertex=(((-b \/ (2 * a)),(((4 * a * c) - (b * b)) \/ (4 * a))))\r\n  return vertex","test_list":["assert parabola_vertex(5,3,2)==(-0.3, 1.55)","assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)","assert parabola_vertex(2,4,6)==(-1.0, 4.0)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the vertex of a parabola.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: parabola_vertex(5,3,2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef parabola_vertex(5,3,2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def parabola_vertex(a, b, c):\n    x_vertex = -b \/ (2 * a)\n    y_vertex = (4 * a * c - b**2) \/ (4 * a)\n    return (x_vertex, y_vertex)","token_probability":0.2664105605}
{"task_id":154,"text":"Write a function to extract every specified element from a given two dimensional list.","code":"def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result","test_list":["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]","assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]","assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to extract every specified element from a given two dimensional list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def specified_element(matrix, element):\n    result = []\n    for row in matrix:\n        result.extend([i for i in row if i == element])\n    return result","token_probability":0.3187950073}
{"task_id":155,"text":"Write a python function to toggle all even bits of a given number.","code":"def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ","test_list":["assert even_bit_toggle_number(10) == 0","assert even_bit_toggle_number(20) == 30","assert even_bit_toggle_number(30) == 20"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to toggle all even bits of a given number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: even_bit_toggle_number(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef even_bit_toggle_number(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def even_bit_toggle_number(num):\n    mask = 0xAAAAAAAA  # Mask for even bits (binary: 10101010...)\n    result = num ^ mask\n    return result","token_probability":0.0215522745}
{"task_id":156,"text":"Write a function to convert a tuple of string values to a tuple of integer values.","code":"def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result","test_list":["assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))","assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))","assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to convert a tuple of string values to a tuple of integer values.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: tuple_int_str()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef tuple_int_str():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def tuple_int_str(string_tuple):\n    result = tuple(int(value) for value in string_tuple)\n    return result","token_probability":0.3668795574}
{"task_id":157,"text":"Write a function to reflect the run-length encoding from a list.","code":"from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]","test_list":["assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]","assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]","assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to reflect the run-length encoding from a list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: encode_list([1,1,2,3,4,4.3,5,1])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef encode_list([1,1,2,3,4,4.3,5,1]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def encode_list(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    count = 1\n    current = lst[0]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == current:\n            count += 1\n        else:\n            encoded.append((count, current))\n            current = lst[i]\n            count = 1\n            \n    encoded.append((count, current))\n    \n    return encoded","token_probability":0.0393641572}
{"task_id":158,"text":"Write a python function to find k number of operations required to make all elements equal.","code":"def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) \/ k \r\n    return int(res) ","test_list":["assert min_Ops([2,2,2,2],4,3) == 0","assert min_Ops([4,2,6,8],4,3) == -1","assert min_Ops([21,33,9,45,63],5,6) == 24"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find k number of operations required to make all elements equal.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: min_Ops([2,2,2,2],4,3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef min_Ops([2,2,2,2],4,3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def min_Ops(arr, n, k):\n    max_elem = max(arr)\n    operations = 0\n    \n    for num in arr:\n        operations += (max_elem - num) \/\/ k\n        if (max_elem - num) % k != 0:\n            operations += 1\n            \n    return operations","token_probability":0.1154211902}
{"task_id":159,"text":"Write a function to print the season for the given month and day.","code":"def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season","test_list":["assert month_season('January',4)==('winter')","assert month_season('October',28)==('autumn')","assert month_season('June',6)==('spring')"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to print the season for the given month and day.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: month_season('January',4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef month_season('January',4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def month_season(month, day):\n    seasons = {\n        'Winter': [(12, 21), (3, 19)],\n        'Spring': [(3, 20), (6, 20)],\n        'Summer': [(6, 21), (9, 22)],\n        'Fall': [(9, 23), (12, 20)]\n    }\n    \n    month_days = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4,\n        'May': 5, 'June': 6, 'July': 7, 'August': 8,\n        'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    \n    month_num = month_days[month]\n    \n    for season, (start, end) in seasons.items():\n        if (month_num == start[0] and day >= start[1]) or (month_num == end[0] and day <= end[1]):\n            return season\n        elif start[0] < month_num < end[0]:\n            return season\n    \n    return 'Invalid date'","token_probability":0.0001376995}
{"task_id":160,"text":"Write a function to find x and y that satisfies ax + by = n.","code":"def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) \/ b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ","test_list":["assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)","assert solution(4, 2, 7) == 'No solution'","assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find x and y that satisfies ax + by = n.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: solution(2, 3, 7)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef solution(2, 3, 7):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def solution(a, b, n):\n    for x in range(n \/\/ a + 1):\n        for y in range(n \/\/ b + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None","token_probability":0.741184012}
{"task_id":161,"text":"Write a function to remove all elements from a given list present in another list.","code":"def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result","test_list":["assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]","assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]","assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to remove all elements from a given list present in another list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_elements(list1, list2):\n    result = [item for item in list1 if item not in list2]\n    return result","token_probability":0.5099367762}
{"task_id":162,"text":"Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).","code":"def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)","test_list":["assert sum_series(6)==12","assert sum_series(10)==30","assert sum_series(9)==25"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sum_series(6)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sum_series(6):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sum_series(n):\n    result = 0\n    while n > 0:\n        result += n\n        n -= 2\n    return result","token_probability":0.5115807809}
{"task_id":163,"text":"Write a function to calculate the area of a regular polygon.","code":"from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) \/ (4 * tan(pi \/ s))\r\n  return area","test_list":["assert area_polygon(4,20)==400.00000000000006","assert area_polygon(10,15)==1731.1969896610804","assert area_polygon(9,7)==302.90938549487214"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate the area of a regular polygon.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: area_polygon(4,20)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef area_polygon(4,20):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def area_polygon(sides, length):\n    import math\n    if sides < 3:\n        return 0\n    area = (sides * length**2) \/ (4 * math.tan(math.pi \/ sides))\n    return area","token_probability":0.2366836182}
{"task_id":164,"text":"Write a python function to check whether the sum of divisors are same or not.","code":"import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n \/ i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ","test_list":["assert areEquivalent(36,57) == False","assert areEquivalent(2,4) == False","assert areEquivalent(23,47) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the sum of divisors are same or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: areEquivalent(36,57)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef areEquivalent(36,57):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)","token_probability":0.6203556278}
{"task_id":165,"text":"Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.","code":"def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ","test_list":["assert count_char_position(\"xbcefg\") == 2","assert count_char_position(\"ABcED\") == 3","assert count_char_position(\"AbgdeF\") == 5"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_char_position(\"xbcefg\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_char_position(\"xbcefg\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() == chr(97 + i):  # 97 is the ASCII value for 'a'\n            count += 1\n    return count","token_probability":0.0809514181}
{"task_id":166,"text":"Write a python function to count the pairs with xor as an even number.","code":"def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ","test_list":["assert find_even_Pair([5,4,7,2,1],5) == 4","assert find_even_Pair([7,2,8,1,0,5,11],7) == 9","assert find_even_Pair([1,2,3],3) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count the pairs with xor as an even number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_even_Pair([5,4,7,2,1],5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_even_Pair([5,4,7,2,1],5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count","token_probability":0.949383303}
{"task_id":167,"text":"Write a python function to find smallest power of 2 greater than or equal to n.","code":"def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ","test_list":["assert next_Power_Of_2(0) == 1","assert next_Power_Of_2(5) == 8","assert next_Power_Of_2(17) == 32"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find smallest power of 2 greater than or equal to n.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: next_Power_Of_2(0)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef next_Power_Of_2(0):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power","token_probability":0.9694345831}
{"task_id":168,"text":"Write a python function to find the frequency of a number in a given array.","code":"def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ","test_list":["assert frequency([1,2,3],4) == 0","assert frequency([1,2,2,3,3,3,4],3) == 3","assert frequency([0,1,2,3,1,2],1) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the frequency of a number in a given array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: frequency([1,2,3],4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef frequency([1,2,3],4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def frequency(arr, num):\n    count = 0\n    for element in arr:\n        if element == num:\n            count += 1\n    return count","token_probability":0.6869609721}
{"task_id":169,"text":"Write a function to calculate the nth pell number.","code":"def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ","test_list":["assert get_pell(4) == 12","assert get_pell(7) == 169","assert get_pell(8) == 408"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate the nth pell number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: get_pell(4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef get_pell(4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def get_pell(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b","token_probability":0.2143568573}
{"task_id":170,"text":"Write a function to find sum of the numbers in a list between the indices of a specified range.","code":"def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ","test_list":["assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29","assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16","assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def sum_range_list(lst, start, end):\n    if start < 0 or end >= len(lst) or start > end:\n        return 0\n    return sum(lst[start:end + 1])","token_probability":0.238284773}
{"task_id":171,"text":"Write a function to find the perimeter of a pentagon.","code":"import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter","test_list":["assert perimeter_pentagon(5)==25","assert perimeter_pentagon(10)==50","assert perimeter_pentagon(15)==75"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the perimeter of a pentagon.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: perimeter_pentagon(5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef perimeter_pentagon(5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def perimeter_pentagon(side_length):\n    result = 5 * side_length\n    return result","token_probability":0.8834549216}
{"task_id":172,"text":"Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item","code":"def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count","test_list":["assert count_occurance(\"letstdlenstdporstd\") == 3","assert count_occurance(\"truststdsolensporsd\") == 1","assert count_occurance(\"makestdsostdworthit\") == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_occurance(\"letstdlenstdporstd\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_occurance(\"letstdlenstdporstd\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_occurance(s):\n    return s.count('std')","token_probability":0.3955038154}
{"task_id":173,"text":"Write a function to remove everything except alphanumeric characters from a string.","code":"import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))","test_list":["assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')","assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')","assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to remove everything except alphanumeric characters from a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_splchar('python  @#&^%$*program123')\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_splchar('python  @#&^%$*program123'):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_splchar(input_string):\n    result = ''.join(char for char in input_string if char.isalnum())\n    return result","token_probability":0.7766728897}
{"task_id":174,"text":"Write a function to group a sequence of key-value pairs into a dictionary of lists.","code":"def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result","test_list":["assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}","assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}","assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: group_keyvalue([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef group_keyvalue([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result","token_probability":0.8120938189}
{"task_id":175,"text":"Write a function to verify validity of a string of parentheses.","code":"def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0","test_list":["assert is_valid_parenthese(\"(){}[]\")==True","assert is_valid_parenthese(\"()[{)}\")==False","assert is_valid_parenthese(\"()\")==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to verify validity of a string of parentheses.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_valid_parenthese(\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_valid_parenthese(\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_valid_parenthese(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0","token_probability":0.364932381}
{"task_id":176,"text":"Write a function to find the perimeter of a triangle.","code":"def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter","test_list":["assert perimeter_triangle(10,20,30)==60","assert perimeter_triangle(3,4,5)==12","assert perimeter_triangle(25,35,45)==105"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the perimeter of a triangle.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: perimeter_triangle(10,20,30)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef perimeter_triangle(10,20,30):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def perimeter_triangle(a, b, c):\n    result = a + b + c\n    return result","token_probability":0.8117642725}
{"task_id":177,"text":"Write a python function to find two distinct numbers such that their lcm lies within the given range.","code":"def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ","test_list":["assert answer(3,8) == (3,6)","assert answer(2,6) == (2,4)","assert answer(1,3) == (1,2)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: answer(3,8)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef answer(3,8):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def answer(start, end):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return abs(a * b) \/\/ gcd(a, b)\n\n    for i in range(start, end + 1):\n        for j in range(i + 1, end + 1):\n            if start <= lcm(i, j) <= end:\n                return (i, j)\n    \n    return None","token_probability":0.0286566777}
{"task_id":178,"text":"Write a function to search some literals strings in a string.","code":"import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')","test_list":["assert string_literals(['language'],'python language')==('Matched!')","assert string_literals(['program'],'python language')==('Not Matched!')","assert string_literals(['python'],'programming language')==('Not Matched!')"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to search some literals strings in a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: string_literals(['language'],'python language')\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef string_literals(['language'],'python language'):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def string_literals(literals, text):\n    result = []\n    for literal in literals:\n        if literal in text:\n            result.append(literal)\n    return result","token_probability":0.2767370009}
{"task_id":179,"text":"Write a function to find if the given number is a keith number or not.","code":"def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp \/ 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ","test_list":["assert is_num_keith(14) == True","assert is_num_keith(12) == False","assert is_num_keith(197) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find if the given number is a keith number or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_num_keith(14)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_num_keith(14):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_num_keith(n):\n    if n < 1:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    length = len(digits)\n    \n    sequence = digits[:]\n    \n    while True:\n        next_term = sum(sequence)\n        if next_term == n:\n            return True\n        elif next_term > n:\n            return False\n        sequence.append(next_term)\n        sequence.pop(0)","token_probability":0.0026432488}
{"task_id":180,"text":"Write a function to calculate distance between two points using latitude and longitude.","code":"from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist","test_list":["assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429","assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514","assert distance_lat_long(10,20,30,40)==6783.751974994595"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to calculate distance between two points using latitude and longitude.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: distance_lat_long(23.5,67.5,25.5,69.5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef distance_lat_long(23.5,67.5,25.5,69.5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def distance_lat_long(lat1, lon1, lat2, lon2):\n    from math import radians, sin, cos, sqrt, atan2\n\n    # Convert latitude and longitude from degrees to radians\n    lat1_rad = radians(lat1)\n    lon1_rad = radians(lon1)\n    lat2_rad = radians(lat2)\n    lon2_rad = radians(lon2)\n\n    # Haversine formula\n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n\n    a = sin(dlat \/ 2)**2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon \/ 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    # Radius of Earth in kilometers\n    radius = 6371.0\n\n    # Calculate the distance\n    distance = radius * c\n    return distance","token_probability":0.0178531105}
{"task_id":181,"text":"Write a function to find the longest common prefix in the given set of strings.","code":"def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ","test_list":["assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'","assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'","assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the longest common prefix in the given set of strings.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def common_prefix(strings, n):\n    if n == 0:\n        return \"\"\n    \n    prefix = strings[0]\n    \n    for i in range(1, n):\n        while strings[i].find(prefix) != 0:\n            prefix = prefix[:-1]\n            if prefix == \"\":\n                return \"\"\n    \n    return prefix","token_probability":0.0777468412}
{"task_id":182,"text":"Write a function to find uppercase, lowercase, special character and numeric values using regex.","code":"import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","test_list":["assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])","assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])","assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_character(\"ThisIsGeeksforGeeks\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_character(\"ThisIsGeeksforGeeks\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_character(s):\n    import re\n    \n    uppercase = re.findall(r'[A-Z]', s)\n    lowercase = re.findall(r'[a-z]', s)\n    special_characters = re.findall(r'[^a-zA-Z0-9]', s)\n    numeric_values = re.findall(r'[0-9]', s)\n    \n    result = {\n        'uppercase': uppercase,\n        'lowercase': lowercase,\n        'special_characters': special_characters,\n        'numeric_values': numeric_values\n    }\n    \n    return result","token_probability":0.039293763}
{"task_id":183,"text":"Write a function to count all the distinct pairs having a difference of k in any array.","code":"def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count","test_list":["assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2","assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5","assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to count all the distinct pairs having a difference of k in any array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_pairs([1, 5, 3, 4, 2], 5, 3)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_pairs([1, 5, 3, 4, 2], 5, 3):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_pairs(arr, n, k):\n    seen = set()\n    pairs = set()\n    \n    for number in arr:\n        if (number - k) in seen:\n            pairs.add((number - k, number))\n        if (number + k) in seen:\n            pairs.add((number, number + k))\n        seen.add(number)\n    \n    return len(pairs)","token_probability":0.0739103328}
{"task_id":184,"text":"Write a function to find all the values in a list that are greater than a specified number.","code":"def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum","test_list":["assert greater_specificnum([220, 330, 500],200)==True","assert greater_specificnum([12, 17, 21],20)==False","assert greater_specificnum([1,2,3,4],10)==False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find all the values in a list that are greater than a specified number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: greater_specificnum([220, 330, 500],200)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef greater_specificnum([220, 330, 500],200):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def greater_specificnum(lst, num):\n    result = [x for x in lst if x > num]\n    return result","token_probability":0.3438997974}
{"task_id":185,"text":"Write a function to find the focus of a parabola.","code":"def parabola_focus(a, b, c): \r\n  focus= (((-b \/ (2 * a)),(((4 * a * c) - (b * b) + 1) \/ (4 * a))))\r\n  return focus","test_list":["assert parabola_focus(5,3,2)==(-0.3, 1.6)","assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)","assert parabola_focus(2,4,6)==(-1.0, 4.125)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the focus of a parabola.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: parabola_focus(5,3,2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef parabola_focus(5,3,2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def parabola_focus(h, k, p):\n    focus_x = h\n    focus_y = k + p\n    return (focus_x, focus_y)","token_probability":0.7548079203}
{"task_id":186,"text":"Write a function to search some literals strings in a string by using regex.","code":"import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')","test_list":["assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'","assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'","assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to search some literals strings in a string by using regex.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_literals('The quick brown fox jumps over the lazy dog.',['fox'])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_literals('The quick brown fox jumps over the lazy dog.',['fox']):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_literals(string, literals):\n    import re\n    pattern = r'\\b(' + '|'.join(map(re.escape, literals)) + r')\\b'\n    matches = re.findall(pattern, string)\n    return matches","token_probability":0.2034438259}
{"task_id":187,"text":"Write a function to find the longest common subsequence for the given two sequences.","code":"def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","test_list":["assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4","assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3","assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the longest common subsequence for the given two sequences.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def longest_common_subsequence(seq1, seq2, m, n):\n    L = [[0] * (n + 1) for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    index = L[m][n]\n    lcs = [''] * (index + 1)\n    lcs[index] = ''\n\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if seq1[i - 1] == seq2[j - 1]:\n            lcs[index - 1] = seq1[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(lcs)","token_probability":0.009560653}
{"task_id":188,"text":"Write a python function to check whether the given number can be represented by product of two squares or not.","code":"def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;","test_list":["assert prod_Square(25) == False","assert prod_Square(30) == False","assert prod_Square(16) == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the given number can be represented by product of two squares or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: prod_Square(25)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef prod_Square(25):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def prod_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(int(n**0.5) + 1):\n        j = (n - i**2)**0.5\n        if j.is_integer():\n            return True\n    return False","token_probability":0.1471338113}
{"task_id":189,"text":"Write a python function to find the first missing positive number.","code":"def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)","test_list":["assert first_Missing_Positive([1,2,3,-1,5],5) == 4","assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2","assert first_Missing_Positive([0,1,2,5,-8],5) == 3"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the first missing positive number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: first_Missing_Positive([1,2,3,-1,5],5)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef first_Missing_Positive([1,2,3,-1,5],5):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def first_Missing_Positive(nums, n):\n    nums = [num for num in nums if num > 0]\n    nums_set = set(nums)\n    \n    for i in range(1, n + 1):\n        if i not in nums_set:\n            return i\n            \n    return n + 1","token_probability":0.0979074399}
{"task_id":190,"text":"Write a python function to count the number of integral co-ordinates that lie inside a square.","code":"def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","test_list":["assert count_Intgral_Points(1,1,4,4) == 4","assert count_Intgral_Points(1,2,1,2) == 1","assert count_Intgral_Points(4,2,6,4) == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count_Intgral_Points(1,1,4,4)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count_Intgral_Points(1,1,4,4):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 > x2 or y1 > y2:\n        return 0\n    return (x2 - x1) * (y2 - y1)","token_probability":0.3794611644}
{"task_id":191,"text":"Write a function to check whether the given month name contains 30 days or not.","code":"def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False","test_list":["assert check_monthnumber(\"February\")==False","assert check_monthnumber(\"June\")==True","assert check_monthnumber(\"April\")==True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check whether the given month name contains 30 days or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_monthnumber(\"February\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_monthnumber(\"February\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_monthnumber(month_name):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days","token_probability":0.1430588232}
{"task_id":192,"text":"Write a python function to check whether a string has atleast one letter and one number.","code":"def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ","test_list":["assert check_String('thishasboth29') == True","assert check_String('python') == False","assert check_String ('string') == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether a string has atleast one letter and one number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: check_String('thishasboth29')\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef check_String('thishasboth29'):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def check_String(s):\n    has_letter = any(c.isalpha() for c in s)\n    has_number = any(c.isdigit() for c in s)\n    return has_letter and has_number","token_probability":0.7647399606}
{"task_id":193,"text":"Write a function to remove the duplicates from the given tuple.","code":"def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ","test_list":["assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)","assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)","assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to remove the duplicates from the given tuple.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_tuple()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_tuple():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_tuple(input_tuple):\n    result = tuple(set(input_tuple))\n    return result","token_probability":0.6714074989}
{"task_id":194,"text":"Write a python function to convert octal number to decimal number.","code":"def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp \/ 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ","test_list":["assert octal_To_Decimal(25) == 21","assert octal_To_Decimal(30) == 24","assert octal_To_Decimal(40) == 32"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to convert octal number to decimal number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: octal_To_Decimal(25)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef octal_To_Decimal(25):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal > 0:\n        digit = octal % 10\n        decimal += digit * (8 ** power)\n        octal \/\/= 10\n        power += 1\n    return decimal","token_probability":0.1617659015}
{"task_id":195,"text":"Write a python function to find the first position of an element in a sorted array.","code":"def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) \/\/ 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res","test_list":["assert first([1,2,3,4,5,6,6],6,6) == 5","assert first([1,2,2,2,3,2,2,4,2],2,9) == 1","assert first([1,2,3],1,3) == 0"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the first position of an element in a sorted array.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: first([1,2,3,4,5,6,6],6,6)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef first([1,2,3,4,5,6,6],6,6):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def first(arr, target, n):\n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) \/\/ 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result","token_probability":0.5454763308}
{"task_id":196,"text":"Write a function to remove all the tuples with length k.","code":"def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ","test_list":["assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]","assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]","assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to remove all the tuples with length k.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_tuples([)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_tuples([):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_tuples(lst, k):\n    result = [t for t in lst if len(t) != k]\n    return result","token_probability":0.6833664833}
{"task_id":197,"text":"Write a function to perform the exponentiation of the given two tuples.","code":"def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n","test_list":["assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)","assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)","assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to perform the exponentiation of the given two tuples.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_exponentio()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_exponentio():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_exponentio(tuple1, tuple2):\n    result = tuple(a ** b for a, b in zip(tuple1, tuple2))\n    return result","token_probability":0.6273413255}
{"task_id":198,"text":"Write a function to find the largest triangle that can be inscribed in an ellipse.","code":"import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) \/ (4 * b);  \r\n    return area ","test_list":["assert largest_triangle(4,2)==10.392304845413264","assert largest_triangle(5,7)==4.639421805988064","assert largest_triangle(9,1)==105.2220865598093"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: largest_triangle(4,2)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef largest_triangle(4,2):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def largest_triangle(a, b):\n    import math\n    \n    # The area of the largest triangle inscribed in an ellipse is given by the formula:\n    # Area = (a * b) * (sqrt(3) \/ 2)\n    area = (a * b) * (math.sqrt(3) \/ 2)\n    \n    return area","token_probability":0.0029890478}
{"task_id":199,"text":"Write a python function to find highest power of 2 less than or equal to given number.","code":"def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ","test_list":["assert highest_Power_of_2(10) == 8","assert highest_Power_of_2(19) == 16","assert highest_Power_of_2(32) == 32"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find highest power of 2 less than or equal to given number.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: highest_Power_of_2(10)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef highest_Power_of_2(10):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power \/\/ 2","token_probability":0.4993080229}
{"task_id":200,"text":"Write a function to find all index positions of the maximum values in a given list.","code":"def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result","test_list":["assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]","assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]","assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find all index positions of the maximum values in a given list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef position_max([12,33,23,10,67,89,45,667,23,12,11,10,54]):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def position_max(lst):\n    max_value = max(lst)\n    result = [index for index, value in enumerate(lst) if value == max_value]\n    return result","token_probability":0.5176874501}
{"task_id":201,"text":"Write a python function to check whether the elements in a list are same or not.","code":"def chkList(lst): \r\n    return len(set(lst)) == 1","test_list":["assert chkList(['one','one','one']) == True","assert chkList(['one','Two','Three']) == False","assert chkList(['bigdata','python','Django']) == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to check whether the elements in a list are same or not.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: chkList(['one','one','one'])\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef chkList(['one','one','one']):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def chkList(lst):\n    if not lst:\n        return True\n    return all(x == lst[0] for x in lst)","token_probability":0.3549234619}
{"task_id":202,"text":"Write a function to remove even characters in a string.","code":"def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2","test_list":["assert remove_even(\"python\")==(\"pto\")","assert remove_even(\"program\")==(\"porm\")","assert remove_even(\"language\")==(\"lnug\")"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to remove even characters in a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: remove_even(\"python\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef remove_even(\"python\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def remove_even(s):\n    result = ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n    return result","token_probability":0.4812485459}
{"task_id":203,"text":"Write a python function to find the hamming distance between given two integers.","code":"def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ","test_list":["assert hamming_Distance(4,8) == 2","assert hamming_Distance(2,4) == 2","assert hamming_Distance(1,2) == 2"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to find the hamming distance between given two integers.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: hamming_Distance(4,8)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef hamming_Distance(4,8):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def hamming_Distance(x, y):\n    return bin(x ^ y).count('1')","token_probability":0.5709589298}
{"task_id":204,"text":"Write a python function to count the occurrence of a given character in a string.","code":"def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ","test_list":["assert count(\"abcc\",\"c\") == 2","assert count(\"ababca\",\"a\") == 3","assert count(\"mnmm0pm\",\"m\") == 4"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a python function to count the occurrence of a given character in a string.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: count(\"abcc\",\"c\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef count(\"abcc\",\"c\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def count(string, character):\n    result = string.count(character)\n    return result","token_probability":0.4188167422}
{"task_id":205,"text":"Write a function to find the inversions of tuple elements in the given tuple list.","code":"def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ","test_list":["assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)","assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)","assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to find the inversions of tuple elements in the given tuple list.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: inversion_elements()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef inversion_elements():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def inversion_elements(tuples_list):\n    inversions = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            if tuples_list[i] > tuples_list[j]:\n                inversions.append((tuples_list[i], tuples_list[j]))\n    return inversions","token_probability":0.1086308839}
{"task_id":206,"text":"Write a function to perform the adjacent element concatenation in the given tuples.","code":"def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ","test_list":["assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')","assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')","assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to perform the adjacent element concatenation in the given tuples.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: concatenate_elements()\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef concatenate_elements():\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def concatenate_elements(tuples_list):\n    result = []\n    for tup in tuples_list:\n        concatenated = ''.join(str(tup[i]) + str(tup[i + 1]) for i in range(len(tup) - 1))\n        result.append(concatenated)\n    return result","token_probability":0.1226839072}
{"task_id":207,"text":"Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.","code":"def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]","test_list":["assert find_longest_repeating_subseq(\"AABEBCDD\") == 3","assert find_longest_repeating_subseq(\"aabb\") == 2","assert find_longest_repeating_subseq(\"aab\") == 1"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: find_longest_repeating_subseq(\"AABEBCDD\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef find_longest_repeating_subseq(\"AABEBCDD\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]","token_probability":0.2876779166}
{"task_id":208,"text":"Write a function to check the given decimal with a precision of 2 by using regex.","code":"import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)","test_list":["assert is_decimal('123.11') == True","assert is_decimal('0.21') == True","assert is_decimal('123.1214') == False"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check the given decimal with a precision of 2 by using regex.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_decimal('123.11')\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_decimal('123.11'):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_decimal(value):\n    import re\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    result = bool(re.match(pattern, value))\n    return result","token_probability":0.3577517677}
{"task_id":209,"text":"Write a function to delete the smallest element from the given heap and then insert a new item.","code":"import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap","test_list":["assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]","assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]","assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to delete the smallest element from the given heap and then insert a new item.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: heap_replace( [25, 44, 68, 21, 39, 23, 89],21)\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef heap_replace( [25, 44, 68, 21, 39, 23, 89],21):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def heap_replace(heap, new_item):\n    import heapq\n    \n    # Remove the smallest element\n    smallest = heapq.heappop(heap)\n    \n    # Insert the new item\n    heapq.heappush(heap, new_item)\n    \n    return heap","token_probability":0.1479744942}
{"task_id":210,"text":"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","code":"import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)","test_list":["assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True","assert is_allowed_specific_char(\"*&%@#!}{\") == False","assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"],"test_setup_code":"","challenge_test_list":[],"codegen_prompt":"\nQuestion:\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\nAdditional Instructions:\n- The output should be a valid Python code that wouldn't crash when ran.\n- The function should have this exact signature: is_allowed_specific_char(\"ABCDEFabcdef123450\")\n- Do not use input() statements - the function should take parameters and return values\n- The function should return the result, not print it\n- Make sure to include parentheses in the function definition\n\nExample format:\ndef is_allowed_specific_char(\"ABCDEFabcdef123450\"):\n    # Your code here\n    return result\n\nWarnings:\n- Do not include any type annotations in the input parameters.\n- Do not include any unit tests or example usage.\n- Do not include any uncommented non-code text.\n- Do not include Python tags (e.g. ```python ...some code ... ```) in any part of the code.\n","pred_code":"def is_allowed_specific_char(s):\n    import re\n    pattern = r'^[a-zA-Z0-9]*$'\n    result = bool(re.match(pattern, s))\n    return result","token_probability":0.2025655831}
