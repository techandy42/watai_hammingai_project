{"task_id":11,"problem_text":"Write a python function to remove first and last occurrence of a given character from the string.","initial_code":"def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return s\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":12,"problem_text":"Write a function to sort a given matrix in ascending order according to the sum of its rows.","initial_code":"```python\ndef sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n```","initial_status":0,"debugged_code":"```python\ndef sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n```","debug_status":0.0}
{"task_id":13,"problem_text":"Write a function to count the most common words in a dictionary.","initial_code":"```python\ndef count_common(words):\n    from collections import Counter\n    word_counts = Counter(words)\n    most_common_word = word_counts.most_common(1)\n    return most_common_word\n\nresult = count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n```","initial_status":0,"debugged_code":"```python\ndef count_common(words):\n    from collections import Counter\n    word_counts = Counter(words)\n    most_common_word = word_counts.most_common(1)\n    return most_common_word[0][0] if most_common_word else None\n\nresult = count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n```","debug_status":0.0}
{"task_id":14,"problem_text":"Write a python function to find the volume of a triangular prism.","initial_code":"def find_Volume(base, height, length):\n    base_area = 0.5 * base * height\n    volume = base_area * length\n    return volume","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":15,"problem_text":"Write a function to split a string at lowercase letters.","initial_code":"```python\ndef split_lowerstring(s):\n    import re\n    result = re.split(r'(?=[a-z])', s)\n    return result\n```","initial_status":0,"debugged_code":"```python\nimport re\n\ndef split_lowerstring(s):\n    result = re.split(r'(?<=[a-z])(?=[^a-z])|(?<=[^a-z])(?=[a-z])', s)\n    return result\n```","debug_status":0.0}
{"task_id":16,"problem_text":"Write a function to find sequences of lowercase letters joined with an underscore.","initial_code":"```python\nimport re\n\ndef text_lowercase_underscore(s):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, s)\n    return matches\n```","initial_status":0,"debugged_code":"```python\nimport re\n\ndef text_lowercase_underscore(s):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, s)\n    return matches\n```","debug_status":0.0}
{"task_id":17,"problem_text":"Write a function to find the perimeter of a square.","initial_code":"def square_perimeter(side_length):\n    perimeter = 4 * side_length\n    return perimeter","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":18,"problem_text":"Write a function to remove characters from the first string which are present in the second string.","initial_code":"```python\ndef remove_dirty_chars(str1, str2):\n    result = ''.join([char for char in str1 if char not in str2])\n    return result\n```","initial_status":0,"debugged_code":"```python\ndef remove_dirty_chars(str1, str2):\n    str2_set = set(str2)  # Convert str2 to a set for faster membership testing\n    result = ''.join([char for char in str1 if char not in str2_set])\n    return result\n```","debug_status":0.0}
{"task_id":19,"problem_text":"Write a function to find whether a given array of integers contains any duplicate element.","initial_code":"```python\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```","initial_status":0,"debugged_code":"```python\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```","debug_status":0.0}
{"task_id":20,"problem_text":"Write a function to check if the given number is woodball or not.","initial_code":"```python\ndef is_woodall(n):\n    k = 0\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        if woodall_number > n:\n            return False\n        k += 1\n```","initial_status":0,"debugged_code":"```python\ndef is_woodall(n):\n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        if woodall_number > n:\n            return False\n        k += 1\n```","debug_status":0.0}
{"task_id":21,"problem_text":"Write a function to find m number of multiples of n.","initial_code":"```python\ndef multiples_of_num(m, n):\n    result = [n * i for i in range(1, m + 1)]\n    return result\n```","initial_status":0,"debugged_code":"```python\ndef multiples_of_num(m, n):\n    if m <= 0:\n        return []\n    result = [n * i for i in range(1, m + 1)]\n    return result\n```","debug_status":0.0}
{"task_id":22,"problem_text":"Write a function to find the first duplicate element in a given array of integers.","initial_code":"def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None","initial_status":0,"debugged_code":"```python\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n```","debug_status":0.0}
{"task_id":23,"problem_text":"Write a python function to find the maximum sum of elements of list in a list of lists.","initial_code":"def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum","initial_status":0,"debugged_code":"```python\ndef maximum_sum(lists):\n    if not lists:  # Check if the input list is empty\n        return 0\n\n    max_sum = float('-inf')  # Initialize to negative infinity to handle negative sums\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n```","debug_status":0.0}
{"task_id":24,"problem_text":"Write a function to convert the given binary number to its decimal equivalent.","initial_code":"```python\ndef binary_to_decimal(binary_number):\n    decimal_number = 0\n    binary_str = str(binary_number)\n    for index, digit in enumerate(reversed(binary_str)):\n        decimal_number += int(digit) * (2 ** index)\n    return decimal_number\n```","initial_status":0,"debugged_code":"```python\ndef binary_to_decimal(binary_number):\n    decimal_number = 0\n    binary_str = str(binary_number)\n    for index, digit in enumerate(reversed(binary_str)):\n        if digit not in ('0', '1'):\n            raise ValueError(\"Input should be a binary number containing only 0s and 1s.\")\n        decimal_number += int(digit) * (2 ** index)\n    return decimal_number\n```","debug_status":0.0}
{"task_id":25,"problem_text":"Write a python function to find the product of non-repeated elements in a given array.","initial_code":"```python\ndef find_Product(arr, n):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    product = 1\n    non_repeated_found = False\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            non_repeated_found = True\n\n    if not non_repeated_found:\n        return 0\n\n    return product\n```","initial_status":0,"debugged_code":"```python\ndef find_Product(arr):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    product = 1\n    non_repeated_found = False\n    for num, count in element_count.items():\n        if count == 1:\n            product *= num\n            non_repeated_found = True\n\n    if not non_repeated_found:\n        return 0\n\n    return product\n```","debug_status":0.0}
{"task_id":26,"problem_text":"Write a function to check if the given tuple list has all k elements.","initial_code":"```python\ndef check_k_elements(tuples_list, k):\n    for t in tuples_list:\n        if len(t) != k:\n            return False\n    return True\n```","initial_status":0,"debugged_code":"```python\ndef check_k_elements(tuples_list, k):\n    for t in tuples_list:\n        if not isinstance(t, tuple) or len(t) != k:\n            return False\n    return True\n```","debug_status":0.0}
{"task_id":27,"problem_text":"Write a python function to remove all digits from a list of strings.","initial_code":"def remove(lst):\n    result = [''.join(filter(lambda x: not x.isdigit(), s)) for s in lst]\n    return result","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":28,"problem_text":"Write a python function to find binomial co-efficient.","initial_code":"def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)\n    c = 1\n    for i in range(k):\n        c = c * (n - i) \/\/ (i + 1)\n    return c","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":29,"problem_text":"Write a python function to find the element occurring odd number of times.","initial_code":"```python\ndef get_Odd_Occurrence(arr, n):\n    result = 0\n    for number in arr:\n        result ^= number\n    return result\n```","initial_status":0,"debugged_code":"```python\ndef get_Odd_Occurrence(arr):\n    result = 0\n    for number in arr:\n        result ^= number\n    return result\n```","debug_status":0.0}
{"task_id":30,"problem_text":"Write a python function to count all the substrings starting and ending with same characters.","initial_code":"def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    return count","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":31,"problem_text":"Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.","initial_code":"def func(lists, k):\n    import heapq\n    from collections import defaultdict\n\n    frequency = defaultdict(int)\n    \n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n\n    heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(heap, (-freq, num))\n    \n    result = []\n    for _ in range(k):\n        if heap:\n            result.append(heapq.heappop(heap)[1])\n    \n    return result","initial_status":0,"debugged_code":"```python\ndef func(lists, k):\n    import heapq\n    from collections import defaultdict\n\n    frequency = defaultdict(int)\n    \n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n\n    heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(heap, (-freq, num))\n    \n    result = []\n    for _ in range(min(k, len(heap))):  # Ensure we don't try to pop more elements than present\n        result.append(heapq.heappop(heap)[1])\n    \n    return result\n```","debug_status":0.0}
{"task_id":32,"problem_text":"Write a python function to find the largest prime factor of a given number.","initial_code":"```python\ndef max_Prime_Factors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime_factor = None\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            if is_prime(factor):\n                largest_prime_factor = factor\n            n \/\/= factor\n        else:\n            factor += 1\n    if n > 1 and is_prime(n):\n        largest_prime_factor = n\n    return largest_prime_factor\n```","initial_status":0,"debugged_code":"```python\ndef max_Prime_Factors(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime_factor = None\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            if is_prime(factor):\n                largest_prime_factor = factor\n            n \/\/= factor\n        else:\n            factor += 1\n    if n > 1:\n        largest_prime_factor = n\n    return largest_prime_factor\n```","debug_status":0.0}
{"task_id":33,"problem_text":"Write a python function to convert a decimal number to binary number.","initial_code":"def decimal_To_Binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n \/\/ 2\n    return binary","initial_status":0,"debugged_code":"```python\ndef decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        return \"-\" + decimal_to_binary(-n)\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n \/\/ 2\n    return binary\n```","debug_status":0.0}
{"task_id":34,"problem_text":"Write a python function to find the missing number in a sorted array.","initial_code":"def find_missing(arr, n):\n    expected_sum = n * (n + 1) \/\/ 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum","initial_status":0,"debugged_code":"```python\ndef find_missing(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n - 1) \/\/ 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum\n```","debug_status":0.0}
{"task_id":35,"problem_text":"Write a function to find the n-th rectangular number.","initial_code":"```python\ndef find_rect_num(n):\n    return n * (n + 1)\n```","initial_status":0,"debugged_code":"```python\ndef find_rect_num(n):\n    return n * n\n```","debug_status":0.0}
{"task_id":36,"problem_text":"Write a python function to find the nth digit in the proper fraction of two given numbers.","initial_code":"```python\ndef find_Nth_Digit(numerator, denominator, n):\n    fraction = numerator \/ denominator\n    fraction_str = str(fraction)\n    \n    if '.' in fraction_str:\n        decimal_part = fraction_str.split('.')[1]\n    else:\n        decimal_part = ''\n    \n    if n <= len(decimal_part):\n        return int(decimal_part[n-1])\n    else:\n        return 0\n```","initial_status":0,"debugged_code":"```python\ndef find_Nth_Digit(numerator, denominator, n):\n    # Check for zero denominator to avoid division by zero\n    if denominator == 0:\n        raise ValueError(\"Denominator cannot be zero.\")\n    \n    # Calculate the fraction\n    fraction = numerator \/ denominator\n    \n    # Convert the fraction to a string with high precision\n    fraction_str = f\"{fraction:.50f}\"\n    \n    # Extract the decimal part\n    if '.' in fraction_str:\n        decimal_part = fraction_str.split('.')[1]\n    else:\n        decimal_part = ''\n    \n    # Find the nth digit in the decimal part\n    if n <= len(decimal_part):\n        return int(decimal_part[n-1])\n    else:\n        return 0\n```","debug_status":0.0}
{"task_id":37,"problem_text":"Write a function to sort a given mixed list of integers and strings.","initial_code":"```python\ndef sort_mixed_list(lst):\n    integers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return integers + strings\n```","initial_status":0,"debugged_code":"```python\ndef sort_mixed_list(lst):\n    integers = sorted([x for x in lst if isinstance(x, int)])\n    strings = sorted([x for x in lst if isinstance(x, str)])\n    return integers + strings\n```","debug_status":0.0}
{"task_id":38,"problem_text":"Write a function to find the division of first even and odd number of a given list.","initial_code":"```python\ndef div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even \/ first_odd\n    else:\n        return None\n```","initial_status":0,"debugged_code":"```python\ndef div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even \/ first_odd\n    else:\n        return \"Either an even or an odd number is missing in the list\"\n```","debug_status":0.0}
{"task_id":39,"problem_text":"Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.","initial_code":"```python\ndef rearange_string(s):\n    from collections import Counter\n    import heapq\n\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Previous character and its frequency\n    prev_freq, prev_char = 0, ''\n    \n    # Resultant rearranged string\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If previous character can still be used, push it back to the heap\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update previous character and frequency\n        prev_freq, prev_char = freq + 1, char\n    \n    # Check if rearranged string is valid\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"\"\n```","initial_status":0,"debugged_code":"```python\ndef rearrange_string(s):\n    from collections import Counter\n    import heapq\n\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap based on character frequency\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Previous character and its frequency\n    prev_freq, prev_char = 0, ''\n    \n    # Resultant rearranged string\n    result = []\n    \n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        # If previous character can still be used, push it back to the heap\n        if prev_freq < 0:\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update previous character and frequency\n        prev_freq, prev_char = freq + 1, char\n    \n    # Check if rearranged string is valid\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"\"\n```","debug_status":0.0}
{"task_id":40,"problem_text":"Write a function to find frequency of the elements in a given list of lists using collections module.","initial_code":"def freq_element(lists_of_lists):\n    from collections import Counter\n    flat_list = [item for sublist in lists_of_lists for item in sublist]\n    frequency = Counter(flat_list)\n    return frequency","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":41,"problem_text":"Write a function to filter even numbers using lambda function.","initial_code":"def filter_evennumbers(numbers):\n    result = list(filter(lambda x: x % 2 == 0, numbers))\n    return result","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":42,"problem_text":"Write a python function to find the sum of repeated elements in a given array.","initial_code":"def find_Sum(arr, n):\n    element_count = {}\n    sum_repeated = 0\n    \n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    for element, count in element_count.items():\n        if count > 1:\n            sum_repeated += element * count\n    \n    return sum_repeated","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":43,"problem_text":"Write a function to find sequences of lowercase letters joined with an underscore using regex.","initial_code":"def text_match(s):\n    import re\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, s)\n    return result","initial_status":0,"debugged_code":"```python\ndef text_match(s):\n    import re\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.findall(pattern, s)\n    return result\n```","debug_status":0.0}
{"task_id":44,"problem_text":"Write a function that matches a word at the beginning of a string.","initial_code":"```python\nimport re\n\ndef text_match_string(s):\n    pattern = r\"^word\"\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n```","initial_status":0,"debugged_code":"```python\nimport re\n\ndef text_match_string(s):\n    pattern = r\"^word\"\n    if re.match(pattern, s, re.IGNORECASE):  # Added re.IGNORECASE to make the match case-insensitive\n        return True\n    else:\n        return False\n```","debug_status":0.0}
{"task_id":45,"problem_text":"Write a function to find the gcd of the given array elements.","initial_code":"```python\ndef get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n    \n    return result\n```","initial_status":0,"debugged_code":"```python\ndef get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    if not arr:  # Check if the array is empty\n        return None  # Return None or raise an exception if preferred\n    \n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n    \n    return result\n```","debug_status":0.0}
{"task_id":46,"problem_text":"Write a python function to determine whether all the numbers are different from each other are not.","initial_code":"def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":47,"problem_text":"Write a python function to find the last digit when factorial of a divides factorial of b.","initial_code":"```python\ndef compute_Last_Digit(a, b):\n    if a > b:\n        return 0\n    else:\n        return 1\n\n# Explanation:\n# If a > b, then factorial of a cannot divide factorial of b, hence the last digit is 0.\n# If a <= b, then factorial of a divides factorial of b, and the last digit is 1.\n```\n","initial_status":0,"debugged_code":"```python\ndef compute_last_digit(a, b):\n    if a > b:\n        return 0\n    else:\n        # Calculate the last non-zero digit of factorial(b) \/ factorial(a)\n        last_digit = 1\n        for i in range(a + 1, b + 1):\n            last_digit *= i\n            # Remove trailing zeros\n            while last_digit % 10 == 0:\n                last_digit \/\/= 10\n            # Keep only the last digit\n            last_digit %= 10\n        return last_digit\n```","debug_status":0.0}
{"task_id":48,"problem_text":"Write a python function to set all odd bits of a given number.","initial_code":"def odd_bit_set_number(n):\n    mask = 0\n    bit_position = 1\n    while bit_position < n.bit_length() or bit_position < 32:\n        mask |= (1 << bit_position)\n        bit_position += 2\n    return n | mask","initial_status":0,"debugged_code":"```python\ndef odd_bit_set_number(n):\n    mask = 0\n    bit_position = 1\n    while bit_position < 32:  # Ensure we only consider the first 32 bits\n        mask |= (1 << bit_position)\n        bit_position += 2\n    return n | mask\n```","debug_status":0.0}
{"task_id":49,"problem_text":"Write a function to extract every first or specified element from a given two-dimensional list.","initial_code":"def specified_element(matrix, index):\n    result = [row[index] for row in matrix if len(row) > index]\n    return result","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":50,"problem_text":"Write a function to find the list with minimum length using lambda function.","initial_code":"def min_length_list(lists):\n    return min(lists, key=lambda x: len(x))","initial_status":0,"debugged_code":"```python\ndef min_length_list(lists):\n    return min(lists, key=lambda x: len(x))\n```","debug_status":0.0}
{"task_id":51,"problem_text":"Write a function to print check if the triangle is equilateral or not.","initial_code":"```python\ndef check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n```","initial_status":0,"debugged_code":"```python\ndef check_equilateral(a, b, c):\n    if a == b == c:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n```","debug_status":0.0}
{"task_id":52,"problem_text":"Write a function to caluclate area of a parallelogram.","initial_code":"def parallelogram_area(base, height):\n    area = base * height\n    return area","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":53,"problem_text":"Write a python function to check whether the first and last characters of a given string are equal or not.","initial_code":"def check_Equality(s):\n    if not s:\n        return False\n    return s[0] == s[-1]","initial_status":0,"debugged_code":"```python\ndef check_equality(s):\n    if not s:\n        return False\n    return s[0] == s[-1]\n```","debug_status":0.0}
{"task_id":54,"problem_text":"Write a function to sort the given array by using counting sort.","initial_code":"```python\ndef counting_sort(arr):\n    if not arr:\n        return []\n\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n\n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n\n    for num in arr:\n        count[num - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output\n```","initial_status":0,"debugged_code":"```python\ndef counting_sort(arr):\n    if not arr:\n        return []\n\n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n\n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n\n    for num in arr:\n        count[num - min_val] += 1\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    for num in reversed(arr):\n        output[count[num - min_val] - 1] = num\n        count[num - min_val] -= 1\n\n    return output\n```","debug_status":0.0}
{"task_id":55,"problem_text":"Write a function to find t-nth term of geometric series.","initial_code":"def tn_gp(a, r, n):\n    result = a * (r ** (n - 1))\n    return result","initial_status":0,"debugged_code":"```python\ndef tn_gp(a, r, n):\n    result = a * (r ** (n - 1))\n    return result\n```","debug_status":0.0}
{"task_id":56,"problem_text":"Write a python function to check if a given number is one less than twice its reverse.","initial_code":"def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":57,"problem_text":"Write a python function to find the largest number that can be formed with the given digits.","initial_code":"```python\ndef find_Max_Num(digits, n):\n    digits.sort(reverse=True)\n    max_num = ''.join(map(str, digits))\n    return int(max_num)\n```","initial_status":0,"debugged_code":"```python\ndef find_Max_Num(digits):\n    digits.sort(reverse=True)\n    max_num = ''.join(map(str, digits))\n    return int(max_num)\n```","debug_status":0.0}
{"task_id":58,"problem_text":"Write a python function to check whether the given two integers have opposite sign or not.","initial_code":"def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)","initial_status":1,"debugged_code":null,"debug_status":null}
{"task_id":59,"problem_text":"Write a function to find the nth octagonal number.","initial_code":"```python\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n```","initial_status":0,"debugged_code":"```python\ndef nth_octagonal_number(n):\n    return n * (3 * n - 2)\n```","debug_status":0.0}
{"task_id":60,"problem_text":"Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.","initial_code":"```python\ndef max_len_sub(arr, n):\n    if n == 0:\n        return 0\n\n    max_len = 1\n    current_len = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 1\n\n    max_len = max(max_len, current_len)\n    return max_len\n```","initial_status":0,"debugged_code":"```python\ndef max_len_sub(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_len = 1\n    current_len = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 1\n\n    max_len = max(max_len, current_len)\n    return max_len\n```","debug_status":0.0}
