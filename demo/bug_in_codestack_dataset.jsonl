{"code": "def count_common(words):\n    from collections import Counter\n    word_count = Counter(words)\n    return word_count.most_common()\n\ntry:\n    print(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']))\nexcept Exception as e:\n    print(e)\n\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\ndef is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False\ndef reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) \ndef check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "func_error": "count_common"}
{"code": "def split_lowerstring(str):\n    result = []\n    current_segment = []\n    \n    for char in str:\n        if char.islower():\n            if current_segment:\n                result.append(''.join(current_segment))\n                current_segment = []\n        current_segment.append(char)\n    \n    if current_segment:\n        result.append(''.join(current_segment))\n    \n    return result\n\ntry:\n    print(split_lowerstring(\"AbCd\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(split_lowerstring(\"Python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(split_lowerstring(\"Programming\"))\nexcept Exception as e:\n    print(e)\n\nassert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i\ndef sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False\ndef sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "func_error": "split_lowerstring"}
{"code": "def is_woodall(n):\n    if n < 1:\n        return False\n    k = 1\n    while k * (2 ** k) - n > 0:\n        k += 1\n    return (k * (2 ** k) - n) in (1, 2)\n\ntry:\n    print(is_woodall(383))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_woodall(254))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_woodall(200))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_woodall(32212254719))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_woodall(32212254718))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_woodall(159))\nexcept Exception as e:\n    print(e)\n\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\nassert is_woodall(32212254719) == True\nassert is_woodall(32212254718) == False\nassert is_woodall(159) == True\ndef check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) \nimport math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))\ndef generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix", "func_error": "is_woodall"}
{"code": "def find_Product(arr, n):\n    from collections import Counter\n    element_count = Counter(arr)\n    product = 1\n    found_non_repeated = False\n    \n    for key, count in element_count.items():\n        if count == 1:\n            product *= key\n            found_non_repeated = True\n            \n    return product if found_non_repeated else 0\n\ntry:\n    print(find_Product([1,1,2,3],4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Product([1,2,3,1,1],5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Product([1,1,4,5,6],5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Product([1,1,4,5,6,5,7,1,1,3,4],11))\nexcept Exception as e:\n    print(e)\n\nassert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120\nassert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520\ndef count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; \ndef are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False\ndef Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "func_error": "find_Product"}
{"code": "def check_k_elements(tuples_list, k):\n    elements_set = set()\n    for t in tuples_list:\n        for item in t:\n            elements_set.add(item)\n    return len(elements_set) == k\n\ntry:\n    print(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_k_elements([(7, 7, 7), (7, 7)], 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_k_elements([(9, 9), (9, 9, 9, 9)], 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4))\nexcept Exception as e:\n    print(e)\n\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False\ndef check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False\ndef find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result\ndef last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ", "func_error": "check_k_elements"}
{"code": "from typing import List\nimport heapq\nfrom collections import Counter\n\ndef func(input_lists, k):\n    # Count the frequency of each integer across all lists\n    flat_list = [num for sublist in input_lists for num in sublist]\n    frequency = Counter(flat_list)\n\n    # Use a heap to find the top k most common elements\n    return [item for item, count in heapq.nlargest(k, frequency.items(), key=lambda x: x[1])]\n\ntry:\n    print(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5))\nexcept Exception as e:\n    print(e)\n\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\nimport re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd\ndef maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "func_error": null}
{"code": "def find_missing(arr, n):\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum\n\ntry:\n    print(find_missing([1,2,3,5],4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_missing([1,3,4,5],4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_missing([1,2,3,5,6,7],5))\nexcept Exception as e:\n    print(e)\n\nassert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4\nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") \ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\ndef odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "func_error": "find_missing"}
{"code": "def find_rect_num(n):\n    return (n * (n + 1)) // 2 + (n * (n - 1)) // 2\n\ntry:\n    print(find_rect_num(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_rect_num(5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_rect_num(6))\nexcept Exception as e:\n    print(e)\n\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42\ndef sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1\ndef super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))\nimport heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "func_error": "find_rect_num"}
{"code": "def rearange_string(s):\n    from collections import Counter\n    count = Counter(s)\n    max_char_count = max(count.values())\n    if max_char_count > (len(s) + 1) // 2:\n        return \"Not Possible\"\n    return \"Possible\"\n\ntry:\n    print(rearange_string(\"aab\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(rearange_string(\"aabb\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(rearange_string(\"abccdd\"))\nexcept Exception as e:\n    print(e)\n\nassert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')\ndef sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) \ndef remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) \ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "func_error": "rearange_string"}
{"code": "def find_Sum(arr, target):\n    element_count = {}\n    for num in arr:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n            \n    repeated_sum = sum(num for num, count in element_count.items() if count > 1)\n    return repeated_sum\n\ntry:\n    print(find_Sum([1,2,3,1,1,4,5,6],8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Sum([1,2,3,1,1],5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Sum([1,1,2],3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Sum([1,1,2,3,4,5,6,3,5],9))\nexcept Exception as e:\n    print(e)\n\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2\nassert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18\ndef check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) \ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list\ndef max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "func_error": "find_Sum"}
{"code": "def text_match_string(input_str):\n    keyword = \"hello\"\n    if input_str.startswith(keyword):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\ntry:\n    print(text_match_string(\" python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_string(\"python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_string(\"  lang\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_string(\"foo\"))\nexcept Exception as e:\n    print(e)\n\nassert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')\nassert text_match_string(\"foo\")==('Found a match!')\ndef count_list(input_list): \r\n    return (len(input_list))**2\ndef check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) \ndef decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False", "func_error": "text_match_string"}
{"code": "def odd_bit_set_number(num):\n    mask = 0xAAAAAAAA  # 10101010... in binary (32 bits)\n    return num | mask\n\ntry:\n    print(odd_bit_set_number(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(odd_bit_set_number(20))\nexcept Exception as e:\n    print(e)\ntry:\n    print(odd_bit_set_number(30))\nexcept Exception as e:\n    print(e)\n\nassert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31\ndef count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr\ndef substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) \ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "func_error": "odd_bit_set_number"}
{"code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))\n\ntry:\n    print(tn_gp(1,5,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tn_gp(1,5,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tn_gp(2,6,3))\nexcept Exception as e:\n    print(e)\n\nassert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486\ndef mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product\ndef sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "func_error": "tn_gp"}
{"code": "def is_octagonal(n):\n    return n * (3 * n - 2) // 2\n\ntry:\n    print(is_octagonal(5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_octagonal(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_octagonal(15))\nexcept Exception as e:\n    print(e)\n\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum\ndef pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans \ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "func_error": "is_octagonal"}
{"code": "def max_len_sub(arr, k):\n    n = len(arr)\n    max_length = 0\n    current_length = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) <= k:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n    return max_length\n\ntry:\n    print(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_len_sub([9, 11, 13, 15, 18], 5))\nexcept Exception as e:\n    print(e)\n\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1\nimport re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef max_sum_list(lists):\r\n return max(lists, key=sum)\nfrom sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "func_error": "max_len_sub"}
{"code": "def count_Substrings(s, length):\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if j - i == length:\n                substring = s[i:j]\n                digit_sum = sum(int(char) for char in substring if char.isdigit())\n                if digit_sum == length:\n                    count += 1\n                    \n    return count\n\ntry:\n    print(count_Substrings('112112',6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Substrings('111',3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Substrings('1101112',7))\nexcept Exception as e:\n    print(e)\n\nassert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12\nimport re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))\ndef palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result\nfrom collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ", "func_error": "count_Substrings"}
{"code": "def max_difference(tuples_list):\n    if not tuples_list:\n        return 0\n    \n    max_diff = float('-inf')\n    \n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            diff = abs(tuples_list[i][0] - tuples_list[j][0]) + abs(tuples_list[i][1] - tuples_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff\n\ntry:\n    print(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]))\nexcept Exception as e:\n    print(e)\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\ndef check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) \ndef find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans \ndef bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "func_error": "max_difference"}
{"code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        \n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n                \n    return arr\n\ntry:\n    print(comb_sort([5, 15, 37, 25, 79]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(comb_sort([41, 32, 15, 19, 22]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(comb_sort([99, 15, 13, 47]))\nexcept Exception as e:\n    print(e)\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\ndef is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False\nfrom itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]\ndef length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "func_error": "comb_sort"}
{"code": "def dif_Square(n):\n    return (n % 4 == 0) or (n % 4 == 1)\n\ntry:\n    print(dif_Square(5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dif_Square(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dif_Square(15))\nexcept Exception as e:\n    print(e)\n\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\ndef length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l \ndef count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  \ndef sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "func_error": "dif_Square"}
{"code": "import re\n\ndef multiple_split(str):\n    delimiters = r'[ ,;|]'\n    return re.split(delimiters, str)\n\ntry:\n    print(multiple_split('Forces of the \\ndarkness*are coming into the play.'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.'))\nexcept Exception as e:\n    print(e)\n\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\nimport re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\nimport math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") \nimport re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "func_error": null}
{"code": "def is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    difference = even_sum - odd_sum\n    return difference > 0\n\ntry:\n    print(is_Diff (12345))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_Diff(1212112))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_Diff(1212))\nexcept Exception as e:\n    print(e)\n\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)\nimport math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) \ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "func_error": "is_Diff"}
{"code": "def zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))\n\ntry:\n    print(zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ))\nexcept Exception as e:\n    print(e)\n\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\ndef min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]\ndef add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) \ndef max_sum_list(lists):\r\n return max(lists, key=sum)", "func_error": "zip_tuples"}
{"code": "def get_Char(str):\n    total = sum(ord(char) for char in str) % 3\n    if total == 0:\n        return 'f'\n    elif total == 1:\n        return 't'\n    else:\n        return 'c'\n\ntry:\n    print(get_Char(\"abc\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_Char(\"gfg\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_Char(\"ab\"))\nexcept Exception as e:\n    print(e)\n\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"\ndef re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) \ndef tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) \ndef front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "func_error": "get_Char"}
{"code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\ntry:\n    print(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }))\nexcept Exception as e:\n    print(e)\ntry:\n    print(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"}))\nexcept Exception as e:\n    print(e)\ntry:\n    print(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" }))\nexcept Exception as e:\n    print(e)\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\ndef find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum\ndef sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr\ndef count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "func_error": "merge_dictionaries_three"}
{"code": "def frequency_lists(lists):\n    from collections import defaultdict\n\n    frequency = defaultdict(int)\n    \n    for lst in lists:\n        # Convert the list to a tuple to make it hashable\n        frequency[tuple(lst)] += 1\n    \n    return dict(frequency)\n\ntry:\n    print(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]]))\nexcept Exception as e:\n    print(e)\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\nimport math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") \nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") \ndef remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "func_error": "frequency_lists"}
{"code": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    num -= 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num -= 1\n\ntry:\n    print(next_smallest_palindrome(99))\nexcept Exception as e:\n    print(e)\ntry:\n    print(next_smallest_palindrome(1221))\nexcept Exception as e:\n    print(e)\ntry:\n    print(next_smallest_palindrome(120))\nexcept Exception as e:\n    print(e)\n\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\ndef find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans\ndef sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))\ndef count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "func_error": "next_smallest_palindrome"}
{"code": "def kth_element(arr, k, n):\n    if k <= 0 or k > n:\n        raise ValueError(\"k should be between 1 and n inclusive\")\n    return sorted(arr)[k - 1]\n\ntry:\n    print(kth_element([12,3,5,7,19], 5, 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(kth_element([17,24,8,23], 4, 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(kth_element([16,21,25,36,4], 5, 4))\nexcept Exception as e:\n    print(e)\n\nassert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36\ndef No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No\ndef check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "func_error": "kth_element"}
{"code": "def snake_to_camel(str):\n    components = str.split('_')\n    return components[0] + ''.join(x.capitalize() for x in components[1:])\n\ntry:\n    print(snake_to_camel('python_program'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(snake_to_camel('python_language'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(snake_to_camel('programming_language'))\nexcept Exception as e:\n    print(e)\n\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False\ndef multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) \ndef pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "func_error": "snake_to_camel"}
{"code": "def eulerian_num(n, m):\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            A[i][j] = (i - j) * A[i - 1][j] + (j + 1) * A[i - 1][j - 1] if j > 0 else (i - j) * A[i - 1][j]\n\n    return A[n][m]\n\ntry:\n    print(eulerian_num(3, 1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(eulerian_num(4, 1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(eulerian_num(5, 3))\nexcept Exception as e:\n    print(e)\n\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\ndef is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False\nfrom collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) \ndef first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "func_error": "eulerian_num"}
{"code": "def add_lists(my_list, my_tuple):\n    return tuple(x + y for x, y in zip(my_list, my_tuple))\n\ntry:\n    print(add_lists([5, 6, 7], (9, 10)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(add_lists([6, 7, 8], (10, 11)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(add_lists([7, 8, 9], (11, 12)))\nexcept Exception as e:\n    print(e)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\ndef dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\nfrom collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result\ndef check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "func_error": "add_lists"}
{"code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if all(c in '0123456789abcdefABCDEF' for c in hex(num)[2:]):\n            count += 1\n    return count\n\ntry:\n    print(count_Hexadecimal(10,15))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Hexadecimal(2,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Hexadecimal(15,16))\nexcept Exception as e:\n    print(e)\n\nassert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n\nimport math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "func_error": "count_Hexadecimal"}
{"code": "def merge_sorted_list(list1, list2, list3):\n    import heapq\n    \n    merged_iterator = heapq.merge(list1, list2, list3)\n    return list(merged_iterator)\n\ntry:\n    print(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41]))\nexcept Exception as e:\n    print(e)\n\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\ndef lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr\nfrom collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack\ndef find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "func_error": "merge_sorted_list"}
{"code": "def extract_missing(ranges, start, end):\n    full_range = set(range(start, end + 1))\n    covered_range = set()\n    \n    for r in ranges:\n        covered_range.update(range(r[0], r[1] + 1))\n    \n    missing_range = full_range - covered_range\n    if not missing_range:\n        return []\n    \n    sorted_missing = sorted(missing_range)\n    result = []\n    current_start = sorted_missing[0]\n    \n    for i in range(1, len(sorted_missing)):\n        if sorted_missing[i] != sorted_missing[i - 1] + 1:\n            result.append((current_start, sorted_missing[i - 1]))\n            current_start = sorted_missing[i]\n    \n    result.append((current_start, sorted_missing[-1]))\n    \n    return result\n\ntry:\n    print(extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52))\nexcept Exception as e:\n    print(e)\n\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\ndef odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\ndef is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False\ndef get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ", "func_error": "extract_missing"}
{"code": "def perimeter(radius, height):\n    return 2 * 3.14159 * radius + 2 * height\n\ntry:\n    print(perimeter(2,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(perimeter(1,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(perimeter(3,1))\nexcept Exception as e:\n    print(e)\n\nassert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8\ndef rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area\ndef re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) \ndef count_list(input_list): \r\n    return len(input_list)", "func_error": "perimeter"}
{"code": "def assign_freq(tuples_list):\n    freq_dict = {}\n    for tup in tuples_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    freq_list = [(tup, freq) for tup, freq in freq_dict.items()]\n    return str(freq_list)\n\ntry:\n    print(assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ))\nexcept Exception as e:\n    print(e)\n\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\nimport re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')\ndef find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count \nimport bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "func_error": "assign_freq"}
{"code": "def string_to_list(str):\n    return list(str)\n\ntry:\n    print(string_to_list(\"python programming\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(string_to_list(\"lists tuples strings\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(string_to_list(\"write a program\"))\nexcept Exception as e:\n    print(e)\n\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\ndef binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))\ndef all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True\ndef sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "func_error": "string_to_list"}
{"code": "def max_product_tuple(tuples_list):\n    max_product = float('-inf')\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            product = tuples_list[i][0] * tuples_list[i][1] * tuples_list[j][0] * tuples_list[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\ntry:\n    print(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_product_tuple([(10,20), (15,2), (5,10)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ))\nexcept Exception as e:\n    print(e)\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n\ndef Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated \ndef cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "func_error": "max_product_tuple"}
{"code": "def check_triplet(arr, a, b, c):\n    target_sum = a + b + c\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\ntry:\n    print(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_triplet([10, 4, 2, 3, 5], 5, 15, 0))\nexcept Exception as e:\n    print(e)\n\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True\nimport re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))\nfrom itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n\ndef Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n", "func_error": "check_triplet"}
{"code": "def smartNumber(n):\n    if n <= 0:\n        return 0\n    \n    smart_numbers = []\n    i = 1\n    \n    while len(smart_numbers) < n:\n        if i % 3 == 0 or i % 5 == 0:\n            smart_numbers.append(i)\n        i += 1\n    \n    return smart_numbers[-1]\n\ntry:\n    print(smartNumber(1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(smartNumber(50))\nexcept Exception as e:\n    print(e)\ntry:\n    print(smartNumber(1000))\nexcept Exception as e:\n    print(e)\n\nassert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664\ndef find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1\ndef even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "func_error": "smartNumber"}
{"code": "def angle_complex(radius, complex_number):\n    import cmath\n    return cmath.phase(complex_number)\n\ntry:\n    print(angle_complex(0,1j))\nexcept Exception as e:\n    print(e)\ntry:\n    print(angle_complex(2,1j))\nexcept Exception as e:\n    print(e)\ntry:\n    print(angle_complex(0,2j))\nexcept Exception as e:\n    print(e)\n\nassert angle_complex(0,1j)==1.5707963267948966\nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966\ndef divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\ndef tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) \ndef Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ", "func_error": "angle_complex"}
{"code": "def long_words(n, word_list):\n    return [word for word in word_list if len(word) > n]\n\ntry:\n    print(long_words(3,\"python is a programming language\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(long_words(2,\"writing a program\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(long_words(5,\"sorting list\"))\nexcept Exception as e:\n    print(e)\n\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\nfrom collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) \ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result\ndef Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "func_error": "long_words"}
{"code": "def check_last(arr, p, m):\n    if not arr:\n        return \"EVEN\"  # If the list is empty, we can return EVEN by convention\n    \n    last_element = arr[-1]\n    last_element += p * m\n    if last_element % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"\n\ntry:\n    print(check_last([5,7,10],3,1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_last([2,3],2,3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_last([1,2,3],3,1))\nexcept Exception as e:\n    print(e)\n\nassert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"\ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list\nimport math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") \ndef min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "func_error": "check_last"}
{"code": "def cal_electbill(units):\n    if units <= 100:\n        bill = units * 0.5\n    elif units <= 300:\n        bill = 100 * 0.5 + (units - 100) * 0.75\n    else:\n        bill = 100 * 0.5 + 200 * 0.75 + (units - 300) * 1.2\n    return round(bill, 2)\n\ntry:\n    print(cal_electbill(75))\nexcept Exception as e:\n    print(e)\ntry:\n    print(cal_electbill(265))\nexcept Exception as e:\n    print(e)\ntry:\n    print(cal_electbill(100))\nexcept Exception as e:\n    print(e)\n\nassert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5\ndef move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)\ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)\ndef rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "func_error": "cal_electbill"}
{"code": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    zeroes = arr.count(0)\n    return zeroes / len(arr)\n\ntry:\n    print(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))\nexcept Exception as e:\n    print(e)\n\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\nimport re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] \nimport re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "func_error": "zero_count"}
{"code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    while n > 0:\n        if n & 1:\n            n -= 1\n        n >>= 1\n    return True\n\ntry:\n    print(is_Sum_Of_Powers_Of_Two(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_Sum_Of_Powers_Of_Two(7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_Sum_Of_Powers_Of_Two(14))\nexcept Exception as e:\n    print(e)\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\ndef test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))\ndef sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) \ndef fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "func_error": "is_Sum_Of_Powers_Of_Two"}
{"code": "def circle_circumference(radius):\n    import math\n    return 2 * math.pi * radius\n\ntry:\n    print(circle_circumference(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(circle_circumference(5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(circle_circumference(4))\nexcept Exception as e:\n    print(e)\n\nassert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132\ndef mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result\nimport math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "func_error": "circle_circumference"}
{"code": "def extract_singly(input_list):\n    from collections import Counter\n    \n    # Flatten the list of tuples and count occurrences of each element\n    flat_list = [item for sublist in input_list for item in sublist]\n    element_counts = Counter(flat_list)\n    \n    # Extract elements that occur only once\n    singly_elements = [num for num, count in element_counts.items() if count == 1]\n    \n    return singly_elements\n\ntry:\n    print(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]))\nexcept Exception as e:\n    print(e)\n\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\ndef _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  \ndef concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) \ndef remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "func_error": "extract_singly"}
{"code": "def count_samepair(list1, list2, list3):\n    count = 0\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n    \n    common_elements = set1.intersection(set2).intersection(set3)\n    \n    count = len(common_elements)\n    return count\n\ntry:\n    print(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]))\nexcept Exception as e:\n    print(e)\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\nimport re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()\nimport re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "func_error": "count_samepair"}
{"code": "def find_lists(t):\n    count = 0\n    for item in t:\n        if isinstance(item, list):\n            count += 1\n    return count\n\ntry:\n    print(find_lists(([1, 2, 3, 4], [5, 6, 7, 8])))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_lists(([1, 2], [3, 4], [5, 6])))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])))\nexcept Exception as e:\n    print(e)\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\nfrom collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict\ndef chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) \ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "func_error": "find_lists"}
{"code": "def ascii_value_string(str):\n    total_ascii = sum(ord(char) for char in str)\n    return total_ascii\n\ntry:\n    print(ascii_value_string(\"python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(ascii_value_string(\"Program\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(ascii_value_string(\"Language\"))\nexcept Exception as e:\n    print(e)\n\nassert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76\nfrom collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char\nimport re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))\nimport math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "func_error": "ascii_value_string"}
{"code": "def max_path_sum(triangle, row, col):\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n    \n    left_sum = max_path_sum(triangle, row + 1, col)\n    right_sum = max_path_sum(triangle, row + 1, col + 1)\n    \n    return triangle[row][col] + max(left_sum, right_sum)\n\ntry:\n    print(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2))\nexcept Exception as e:\n    print(e)\n\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24\nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53\ndef max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y\nimport re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')\ndef profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "func_error": "max_path_sum"}
{"code": "def sum_digits_twoparts(n):\n    str_n = str(n)\n    length = len(str_n)\n    max_sum = 0\n\n    for i in range(1, length):\n        part1 = int(str_n[:i])\n        part2 = int(str_n[i:])\n        current_sum = sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2))\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\ntry:\n    print(sum_digits_twoparts(35))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_digits_twoparts(7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_digits_twoparts(100))\nexcept Exception as e:\n    print(e)\n\nassert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result\ndef find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum\ndef is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "func_error": "sum_digits_twoparts"}
{"code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n    \n    return max_length\n\ntry:\n    print(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8))\nexcept Exception as e:\n    print(e)\n\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7\ndef decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") \nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "func_error": "longest_subseq_with_diff_one"}
{"code": "def does_Contain_B(start, step, target):\n    if step == 0:\n        return start == target\n    if step > 0:\n        return (target - start) % step == 0 and target >= start\n    else:\n        return (start - target) % abs(step) == 0 and target <= start\n\ntry:\n    print(does_Contain_B(1,7,3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(does_Contain_B(1,-3,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(does_Contain_B(3,2,5))\nexcept Exception as e:\n    print(e)\n\nassert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False\ndef dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result\ndef check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ", "func_error": "does_Contain_B"}
{"code": "def specified_element(matrix, element):\n    result = []\n    for row in matrix:\n        for item in row:\n            if item == element:\n                result.append(item)\n    return result\n\ntry:\n    print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0))\nexcept Exception as e:\n    print(e)\ntry:\n    print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3))\nexcept Exception as e:\n    print(e)\n\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t\nimport re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ", "func_error": "specified_element"}
{"code": "def even_bit_toggle_number(n):\n    # Create a mask with even bits set to 1\n    mask = 0xAAAAAAAA  # This is 10101010 in binary for 8 bits\n    # Toggle the even bits using XOR\n    return n ^ mask\n\ntry:\n    print(even_bit_toggle_number(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(even_bit_toggle_number(20))\nexcept Exception as e:\n    print(e)\ntry:\n    print(even_bit_toggle_number(30))\nexcept Exception as e:\n    print(e)\n\nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20\ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\ndef max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum\ndef mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "func_error": "even_bit_toggle_number"}
{"code": "def tuple_int_str(input_tuple):\n    return tuple(int(value) for value in input_tuple)\n\ntry:\n    print(tuple_int_str((('333', '33'), ('1416', '55'))))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tuple_int_str((('999', '99'), ('1000', '500'))))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tuple_int_str((('666', '66'), ('1500', '555'))))\nexcept Exception as e:\n    print(e)\n\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\ndef count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) \nimport heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items\ndef maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "func_error": "tuple_int_str"}
{"code": "def encode_list(input_list, encoding_type):\n    encoded_result = []\n    \n    if encoding_type == 'RLE':\n        if not input_list:\n            return encoded_result\n\n        count = 1\n        for i in range(1, len(input_list)):\n            if input_list[i] == input_list[i - 1]:\n                count += 1\n            else:\n                encoded_result.append([count, input_list[i - 1]])\n                count = 1\n        encoded_result.append([count, input_list[-1]])\n    \n    return encoded_result\n\ntry:\n    print(encode_list([1,1,2,3,4,4.3,5,1]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(encode_list('automatically'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(encode_list('python'))\nexcept Exception as e:\n    print(e)\n\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\ndef rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result\ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list\ndef divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "func_error": "encode_list"}
{"code": "def min_Ops(arr, k, target):\n    operations = 0\n    for num in arr:\n        if num > target:\n            operations += (num - target) // k + ((num - target) % k > 0)\n        elif num < target:\n            operations += (target - num) // k + ((target - num) % k > 0)\n    return operations\n\ntry:\n    print(min_Ops([2,2,2,2],4,3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(min_Ops([4,2,6,8],4,3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(min_Ops([21,33,9,45,63],5,6))\nexcept Exception as e:\n    print(e)\n\nassert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24\ndef check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True\ndef find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count \ndef lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "func_error": "min_Ops"}
{"code": "def month_season(month, day):\n    if month in [\"December\", \"January\", \"February\"]:\n        return \"winter\"\n    elif month in [\"March\", \"April\", \"May\"]:\n        return \"spring\"\n    elif month in [\"June\", \"July\", \"August\"]:\n        return \"summer\"\n    elif month in [\"September\", \"October\", \"November\"]:\n        return \"autumn\"\n    return \"Invalid month\"\n\ntry:\n    print(month_season('January',4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(month_season('October',28))\nexcept Exception as e:\n    print(e)\ntry:\n    print(month_season('June',6))\nexcept Exception as e:\n    print(e)\n\nassert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')\ndef add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t", "func_error": "month_season"}
{"code": "def solution(parameters):\n    a, b, n = parameters\n\n    def extended_gcd(a, b):\n        if b == 0:\n            return a, 1, 0\n        gcd, x1, y1 = extended_gcd(b, a % b)\n        x = y1\n        y = x1 - (a // b) * y1\n        return gcd, x, y\n\n    gcd, x, y = extended_gcd(abs(a), abs(b))\n\n    if n % gcd != 0:\n        return 'No solution'\n\n    x *= n // gcd\n    y *= n // gcd\n\n    if a < 0:\n        x = -x\n    if b < 0:\n        y = -y\n\n    return 'Solution found:', x, 'and', y\n\ntry:\n    print(solution(2, 3, 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(solution(4, 2, 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(solution(1, 13, 17))\nexcept Exception as e:\n    print(e)\n\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)\ndef sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result\nfrom collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict\ndef max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "func_error": "solution"}
{"code": "def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\ntry:\n    print(areEquivalent(36,57))\nexcept Exception as e:\n    print(e)\ntry:\n    print(areEquivalent(2,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(areEquivalent(23,47))\nexcept Exception as e:\n    print(e)\n\nassert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True\ndef remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result\ndef lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "func_error": "areEquivalent"}
{"code": "def next_Power_Of_2(n):\n    if n < 1:\n        return None\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\ntry:\n    print(next_Power_Of_2(0))\nexcept Exception as e:\n    print(e)\ntry:\n    print(next_Power_Of_2(5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(next_Power_Of_2(17))\nexcept Exception as e:\n    print(e)\n\nassert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32\nimport re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)\ndef fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\ndef min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "func_error": "next_Power_Of_2"}
{"code": "def answer(range_start, range_end):\n    from math import gcd\n    \n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    \n    for i in range(range_start, range_end):\n        for j in range(i + 1, range_end + 1):\n            if range_start <= lcm(i, j) <= range_end:\n                return (i, j)\n    return None\n\ntry:\n    print(answer(3,8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(answer(2,6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(answer(1,3))\nexcept Exception as e:\n    print(e)\n\nassert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)\ndef profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") \ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "func_error": "answer"}
{"code": "def distance_lat_long(lat1, lon1, lat2, lon2):\n    from math import radians, sin, cos, sqrt, atan2\n\n    # Convert latitude and longitude from degrees to radians\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    # Radius of earth in kilometers is 6371\n    distance = 6371 * c\n    return distance\n\ntry:\n    print(distance_lat_long(23.5,67.5,25.5,69.5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(distance_lat_long(10.5,20.5,30.5,40.5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(distance_lat_long(10,20,30,40))\nexcept Exception as e:\n    print(e)\n\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum\ndef sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) \nclass Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "func_error": "distance_lat_long"}
{"code": "def find_character(str):\n    import re\n\n    uppercase = re.findall(r'[A-Z]', str)\n    lowercase = re.findall(r'[a-z]', str)\n    special = re.findall(r'[^a-zA-Z0-9]', str)\n    numeric = re.findall(r'\\d', str)\n\n    return (uppercase, lowercase, special, numeric)\n\ntry:\n    print(find_character(\"ThisIsGeeksforGeeks\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_character(\"Hithere2\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_character(\"HeyFolks32\"))\nexcept Exception as e:\n    print(e)\n\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\ndef swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList \ndef sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))\ndef check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "func_error": "find_character"}
{"code": "def count_pairs(arr, k, n):\n    if k < 0:\n        return 0\n    \n    nums = set(arr)\n    count = 0\n    \n    for num in nums:\n        if (num + k) in nums:\n            count += 1\n            \n    return count\n\ntry:\n    print(count_pairs([1, 5, 3, 4, 2], 5, 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_pairs([8, 12, 16, 4, 0, 20], 6, 4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_pairs([2, 4, 1, 3, 4], 5, 2))\nexcept Exception as e:\n    print(e)\n\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3\nfrom itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n\ndef str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) \nfrom itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "func_error": "count_pairs"}
{"code": "def greater_specificnum(lst, num):\n    return [x for x in lst if x > num]\n\ntry:\n    print(greater_specificnum([220, 330, 500],200))\nexcept Exception as e:\n    print(e)\ntry:\n    print(greater_specificnum([12, 17, 21],20))\nexcept Exception as e:\n    print(e)\ntry:\n    print(greater_specificnum([1,2,3,4],10))\nexcept Exception as e:\n    print(e)\n\nassert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False\ndef reverse_words(s):\r\n        return ' '.join(reversed(s.split()))\nfrom sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)\ndef move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "func_error": "greater_specificnum"}
{"code": "def parabola_focus(a, h, k):\n    if a == 0:\n        raise ValueError(\"Parameter 'a' cannot be zero.\")\n    \n    # The focus of the parabola is given by the formula (h, k + 1/(4a)) for a vertical parabola\n    focus_y = k + 1 / (4 * a)\n    return (h, focus_y)\n\ntry:\n    print(parabola_focus(5,3,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(parabola_focus(9,8,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(parabola_focus(2,4,6))\nexcept Exception as e:\n    print(e)\n\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)\ndef check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) \ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "func_error": "parabola_focus"}
{"code": "def prod_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    \n    def is_square(x):\n        return int(x ** 0.5) ** 2 == x\n    \n    for a in range(int(n**0.5) + 1):\n        b_squared = n - a * a\n        if b_squared >= 0 and is_square(b_squared):\n            return True\n    return False\n\ntry:\n    print(prod_Square(25))\nexcept Exception as e:\n    print(e)\ntry:\n    print(prod_Square(30))\nexcept Exception as e:\n    print(e)\ntry:\n    print(prod_Square(16))\nexcept Exception as e:\n    print(e)\n\nassert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True\nimport re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\ndef sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)\ndef string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "func_error": "prod_Square"}
{"code": "def count_Intgral_Points(x1, y1, x2, y2):\n    if x1 > x2 or y1 > y2:\n        return 0\n    return (x2 - x1) * (y2 - y1)\n\ntry:\n    print(count_Intgral_Points(1,1,4,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Intgral_Points(1,2,1,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Intgral_Points(4,2,6,4))\nexcept Exception as e:\n    print(e)\n\nassert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1\nimport math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) \ndef get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item\nimport re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result", "func_error": "count_Intgral_Points"}
{"code": "def largest_triangle(a, b):\n    return (3.0 * (a * b)) / 2.0\n\ntry:\n    print(largest_triangle(4,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(largest_triangle(5,7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(largest_triangle(9,1))\nexcept Exception as e:\n    print(e)\n\nassert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093\nimport re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\nimport heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap\ndef check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "func_error": "largest_triangle"}
{"code": "def remove_even(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n\ntry:\n    print(remove_even(\"python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_even(\"program\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_even(\"language\"))\nexcept Exception as e:\n    print(e)\n\nassert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")\ndef get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1\ndef divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nimport bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "func_error": "remove_even"}
{"code": "def inversion_elements(tuples):\n    inversions = []\n    for i, lst in enumerate(tuples):\n        count = 0\n        for j in range(len(lst)):\n            for k in range(j + 1, len(lst)):\n                if lst[j] > lst[k]:\n                    count += 1\n        inversions.append(count)\n    return tuple(inversions)\n\ntry:\n    print(inversion_elements((7, 8, 9, 1, 10, 7)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(inversion_elements((2, 4, 5, 6, 1, 7)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(inversion_elements((8, 9, 11, 14, 12, 13)))\nexcept Exception as e:\n    print(e)\n\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\ndef max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y\ndef find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff \ndef multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "func_error": "inversion_elements"}
{"code": "def heap_replace(heap, new_item):\n    if not heap:\n        return [new_item]\n\n    # Replace the smallest element\n    heap[0] = new_item\n\n    # Adjust the heap to maintain the min-heap property\n    n = len(heap)\n    i = 0\n\n    while True:\n        left = 2 * i + 1\n        right = 2 * i + 2\n        smallest = i\n\n        if left < n and heap[left] < heap[smallest]:\n            smallest = left\n        if right < n and heap[right] < heap[smallest]:\n            smallest = right\n\n        if smallest == i:\n            break\n        \n        heap[i], heap[smallest] = heap[smallest], heap[i]\n        i = smallest\n\n    return heap\n\ntry:\n    print(heap_replace( [25, 44, 68, 21, 39, 23, 89],21))\nexcept Exception as e:\n    print(e)\ntry:\n    print(heap_replace([25, 44, 68, 21, 39, 23, 89],110))\nexcept Exception as e:\n    print(e)\ntry:\n    print(heap_replace([25, 44, 68, 21, 39, 23, 89],500))\nexcept Exception as e:\n    print(e)\n\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)\ndef ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)\ndef lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]", "func_error": "heap_replace"}
{"code": "def count_Num(n):\n    count = 0\n    for i in range(1, n + 1):\n        if (i & (1 << 0)) and (i & (1 << n)):\n            count += 1\n    return count\n\ntry:\n    print(count_Num(2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Num(3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Num(1))\nexcept Exception as e:\n    print(e)\n\nassert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1\ndef sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)\ndef access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result\ndef max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "func_error": "count_Num"}
{"code": "def decode_list(encoded_list, counts):\n    decoded = []\n    for count, value in zip(counts, encoded_list):\n        if isinstance(count, list):\n            count_value = sum(count)\n        else:\n            count_value = count\n        decoded.extend([value] * count_value)\n    return decoded\n\ntry:\n    print(decode_list([[2, 1], 2, 3, [2, 4], 5,1]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']))\nexcept Exception as e:\n    print(e)\ntry:\n    print(decode_list(['p', 'y', 't', 'h', 'o', 'n']))\nexcept Exception as e:\n    print(e)\n\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\ndef sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)\ndef lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm\ndef merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "func_error": "decode_list"}
{"code": "def check_subset_list(nested_list1, nested_list2):\n    return all(sublist in nested_list2 for sublist in nested_list1)\n\ntry:\n    print(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']]))\nexcept Exception as e:\n    print(e)\n\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\ndef find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)\ndef min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2\ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "func_error": "check_subset_list"}
{"code": "def first_Repeated_Char(str):\n    seen = set()\n    for char in str:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\ntry:\n    print(first_Repeated_Char(\"Google\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_Repeated_Char(\"data\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_Repeated_Char(\"python\"))\nexcept Exception as e:\n    print(e)\n\nassert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'\nimport re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()\ndef get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count \ndef palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "func_error": "first_Repeated_Char"}
{"code": "def min_Operations(a, b):\n    operations = 0\n    while a != b:\n        if a > b:\n            a -= 1\n        else:\n            b -= 1\n        operations += 1\n    return operations\n\ntry:\n    print(min_Operations(2,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(min_Operations(4,10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(min_Operations(1,4))\nexcept Exception as e:\n    print(e)\n\nassert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3\ndef discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)\nfrom collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())\ndef find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "func_error": "min_Operations"}
{"code": "def extract_min_max(input_tuple, k):\n    sorted_tuple = sorted(input_tuple)\n    min_k = sorted_tuple[:k]\n    max_k = sorted_tuple[-k:]\n    return (min_k, max_k)\n\ntry:\n    print(extract_min_max((5, 20, 3, 7, 6, 8), 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_min_max((4, 5, 6, 1, 2, 7), 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_min_max((2, 3, 4, 8, 9, 11, 7), 4))\nexcept Exception as e:\n    print(e)\n\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)\ndef string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count\ndef bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] \ndef min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "func_error": "extract_min_max"}
{"code": "def replace_max_specialchar(input_str, max_occurrences):\n    special_characters = [' ', ',', '.']\n    count_replaced = 0\n    \n    for char in special_characters:\n        while count_replaced < max_occurrences and char in input_str:\n            input_str = input_str.replace(char, ':', 1)\n            count_replaced += 1\n            \n    return input_str if count_replaced > 0 else 'Not Passed'\n\ntry:\n    print(replace_max_specialchar('Python language, Programming language.',2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(replace_max_specialchar('a b c,d e f',3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(replace_max_specialchar('ram reshma,ram rahim',1))\nexcept Exception as e:\n    print(e)\n\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\ndef sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea\ndef matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))\ndef palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "func_error": "replace_max_specialchar"}
{"code": "def find_Min(arr, left, right):\n    if left > right:\n        return None\n    \n    if left == right:\n        return arr[left]\n\n    mid = left + (right - left) // 2\n    \n    if mid > left and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    \n    if mid < right and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    \n    if arr[left] <= arr[mid]:\n        return find_Min(arr, mid + 1, right)\n    \n    return find_Min(arr, left, mid - 1)\n\ntry:\n    print(find_Min([1,2,3,4,5],0,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Min([4,6,8],0,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Min([2,3,5,7,9],0,4))\nexcept Exception as e:\n    print(e)\n\nassert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2\nimport math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") \ndef access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result\nimport re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "func_error": "find_Min"}
{"code": "def all_Bits_Set_In_The_Given_Range(start, end, num):\n    mask = (1 << (end - start + 1)) - 1\n    return (num & mask) == 0 and (num & (mask << start)) == 0\n\ntry:\n    print(all_Bits_Set_In_The_Given_Range(4,1,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(all_Bits_Set_In_The_Given_Range(17,2,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(all_Bits_Set_In_The_Given_Range(39,4,6))\nexcept Exception as e:\n    print(e)\n\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem\nimport sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) \ndef join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "func_error": "all_Bits_Set_In_The_Given_Range"}
{"code": "def re_arrange_array(arr, n):\n    result = []\n    for num in arr:\n        if num < 0:\n            result.append(num)\n    for num in arr:\n        if num >= 0:\n            result.append(num)\n    return result\n\ntry:\n    print(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9))\nexcept Exception as e:\n    print(e)\ntry:\n    print(re_arrange_array([12, -14, -26, 13, 15], 5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7))\nexcept Exception as e:\n    print(e)\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\ndef concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) \nimport re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))\nimport re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ", "func_error": "re_arrange_array"}
{"code": "def lateralsuface_cylinder(radius, height):\n    import math\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area\n\ntry:\n    print(lateralsuface_cylinder(10,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(lateralsuface_cylinder(4,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(lateralsuface_cylinder(4,10))\nexcept Exception as e:\n    print(e)\n\nassert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002\nimport datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]\ndef is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "func_error": "lateralsuface_cylinder"}
{"code": "def even_bit_set_number(num):\n    mask = 0xAAAAAAAA  # Binary: 10101010... for 32 bits\n    return num | mask\n\ntry:\n    print(even_bit_set_number(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(even_bit_set_number(20))\nexcept Exception as e:\n    print(e)\ntry:\n    print(even_bit_set_number(30))\nexcept Exception as e:\n    print(e)\n\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\ndef Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") \ndef access_key(ditionary,key):\r\n  return list(ditionary)[key]\ndef binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "func_error": "even_bit_set_number"}
{"code": "def No_of_Triangle(n, m):\n    if n <= 0 or m <= 0:\n        return 0\n    return (n * (n + 1) * (2 * n + 1)) // 6 + (m * (m + 1) * (2 * m + 1)) // 6\n\ntry:\n    print(No_of_Triangle(4,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(No_of_Triangle(4,3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(No_of_Triangle(1,3))\nexcept Exception as e:\n    print(e)\n\nassert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1\ndef palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result\ndef decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False\ndef convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ", "func_error": "No_of_Triangle"}
{"code": "def check_occurences(records):\n    from collections import Counter\n    count = Counter(records)\n    return dict(count)\n\ntry:\n    print(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ))\nexcept Exception as e:\n    print(e)\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\ndef rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result\nimport re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "func_error": "check_occurences"}
{"code": "def get_total_number_of_sequences(n, m):\n    if n <= 0 or m <= 0:\n        return 0\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, (j // 2) + 1):\n                if j >= 2 * k:\n                    dp[i][j] += dp[i - 1][k]\n\n    return sum(dp[n][j] for j in range(1, m + 1))\n\ntry:\n    print(get_total_number_of_sequences(10, 4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_total_number_of_sequences(5, 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_total_number_of_sequences(16, 3))\nexcept Exception as e:\n    print(e)\n\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i\nimport re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")\nimport re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))", "func_error": "get_total_number_of_sequences"}
{"code": "def replace_list(original_list, new_list):\n    if not original_list:\n        return new_list\n    original_list[-1] = new_list\n    return original_list\n\ntry:\n    print(replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(replace_list([1,2,3,4,5],[5,6,7,8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"]))\nexcept Exception as e:\n    print(e)\n\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\ndef discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)\nimport re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result\ndef slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "func_error": "replace_list"}
{"code": "def array_3d(x, y, z):\n    return [[[ '*' for _ in range(z)] for _ in range(y)] for _ in range(x)]\n\ntry:\n    print(array_3d(6,4,3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(array_3d(5,3,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(array_3d(1,2,3))\nexcept Exception as e:\n    print(e)\n\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\ndef max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]\ndef maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "func_error": "array_3d"}
{"code": "def sort_on_occurence(input_list):\n    from collections import Counter\n    \n    # Count the occurrences of the first element of each tuple\n    first_element_count = Counter(x[0] for x in input_list)\n    \n    # Sort the input list based on the occurrence of the first element\n    sorted_list = sorted(input_list, key=lambda x: first_element_count[x[0]], reverse=True)\n    \n    # Create a new list with the format (first_element, second_element, occurrence_count)\n    result = [(x[0], x[1], first_element_count[x[0]]) for x in sorted_list]\n    \n    return result\n\ntry:\n    print(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]))\nexcept Exception as e:\n    print(e)\n\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\nfrom collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack\ndef alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result \ndef power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "func_error": "sort_on_occurence"}
{"code": "def next_Perfect_Square(n):\n    import math\n    next_square_root = math.ceil(math.sqrt(n)) + 1\n    return next_square_root * next_square_root\n\ntry:\n    print(next_Perfect_Square(35))\nexcept Exception as e:\n    print(e)\ntry:\n    print(next_Perfect_Square(6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(next_Perfect_Square(9))\nexcept Exception as e:\n    print(e)\n\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\nimport heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "func_error": "next_Perfect_Square"}
{"code": "def max_sum(arr, n):\n    def max_increasing_sum(arr, n):\n        max_sum = [0] * n\n        for i in range(n):\n            max_sum[i] = arr[i]\n            for j in range(i):\n                if arr[i] > arr[j]:\n                    max_sum[i] = max(max_sum[i], max_sum[j] + arr[i])\n        return max_sum\n\n    def max_decreasing_sum(arr, n):\n        max_sum = [0] * n\n        for i in range(n):\n            max_sum[i] = arr[i]\n            for j in range(i):\n                if arr[i] < arr[j]:\n                    max_sum[i] = max(max_sum[i], max_sum[j] + arr[i])\n        return max_sum\n\n    if n == 0:\n        return 0\n\n    inc_sum = max_increasing_sum(arr, n)\n    dec_sum = max_decreasing_sum(arr[::-1], n)[::-1]\n\n    max_bi_tonic_sum = 0\n    for i in range(n):\n        max_bi_tonic_sum = max(max_bi_tonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n\n    return max_bi_tonic_sum\n\ntry:\n    print(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_sum([80, 60, 30, 40, 20, 10], 6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8))\nexcept Exception as e:\n    print(e)\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\ndef last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) \nfrom collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) \ndef Extract(lst): \r\n    return [item[-1] for item in lst] ", "func_error": "max_sum"}
{"code": "def babylonian_squareroot(x):\n    if x < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    elif x == 0:\n        return 0.0\n    \n    guess = x / 2.0\n    tolerance = 1e-10\n    \n    while True:\n        next_guess = (guess + x / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            break\n        guess = next_guess\n        \n    return guess\n\ntry:\n    print(babylonian_squareroot(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(babylonian_squareroot(2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(babylonian_squareroot(9))\nexcept Exception as e:\n    print(e)\n\nassert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0\ndef join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) \nimport collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict\ndef Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "func_error": "babylonian_squareroot"}
{"code": "def harmonic_sum(n):\n    return sum(1 / i for i in range(1, n)) if n > 1 else 0.0\n\ntry:\n    print(harmonic_sum(7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(harmonic_sum(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(harmonic_sum(19))\nexcept Exception as e:\n    print(e)\n\nassert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum\ndef lcopy(xs):\n  return xs[:]\n\ndef average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "func_error": "harmonic_sum"}
{"code": "def insert_element(lst, element):\n    return [element] + [item for item in lst] if lst else []\n\ntry:\n    print(insert_element(['Red', 'Green', 'Black'] ,'c'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(insert_element(['python', 'java'] ,'program'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(insert_element(['happy', 'sad'] ,'laugh'))\nexcept Exception as e:\n    print(e)\n\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\nimport re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))\ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)\ndef find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)", "func_error": "insert_element"}
{"code": "def words_ae(str):\n    return [word for word in str.split() if word.lower().startswith(('a', 'e'))]\n\ntry:\n    print(words_ae(\"python programe\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(words_ae(\"python programe language\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(statement\"))\nexcept Exception as e:\n    print(e)\n\nassert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"\nassert statement\")==['\nassert ', 'atement']\ndef int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num\ndef odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "func_error": "words_ae"}
{"code": "def newman_prime(n):\n    if n < 1:\n        return None\n\n    def is_newman_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    candidate = 2\n    while len(primes) < n:\n        if is_newman_prime(candidate):\n            if candidate == 2 or candidate % 10 == 1 or candidate % 10 == 3:\n                primes.append(candidate)\n        candidate += 1\n    \n    return primes[-1]\n\ntry:\n    print(newman_prime(3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(newman_prime(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(newman_prime(5))\nexcept Exception as e:\n    print(e)\n\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\ndef coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] \ndef sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "func_error": "newman_prime"}
{"code": "def dog_age(human_years):\n    if human_years == 1:\n        return 15\n    elif human_years == 2:\n        return 24\n    elif human_years == 3:\n        return 29\n    elif human_years == 4:\n        return 34\n    elif human_years == 5:\n        return 39\n    elif human_years == 6:\n        return 44\n    elif human_years == 7:\n        return 49\n    elif human_years == 8:\n        return 61\n    elif human_years == 9:\n        return 73\n    else:\n        return 109\n\ntry:\n    print(dog_age(12))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dog_age(15))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dog_age(24))\nexcept Exception as e:\n    print(e)\n\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\nimport re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") \ndef increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res \nimport math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean", "func_error": "dog_age"}
{"code": "def list_split(input_list, n):\n    return [input_list[i:i+n] for i in range(0, len(input_list), n)]\n\ntry:\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(list_split(['python','java','C','C++','DBMS','SQL'],2))\nexcept Exception as e:\n    print(e)\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\ndef find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n \nimport bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i\ndef max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "func_error": "list_split"}
{"code": "def find_star_num(n):\n    if n < 1:\n        return None\n    return n * (6 * n - 6) // 2 + 1\n\ntry:\n    print(find_star_num(3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_star_num(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_star_num(5))\nexcept Exception as e:\n    print(e)\n\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\ndef remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]\nimport re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)\ndef Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "func_error": "find_star_num"}
{"code": "def get_Position(arr, element, last_removed):\n    last_removed_index = -1\n    for i in range(len(arr)):\n        if arr[i] == last_removed:\n            last_removed_index = i\n    return last_removed_index if last_removed_index != -1 else -1\n\ntry:\n    print(get_Position([2,5,4],3,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_Position([4,3],2,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_Position([1,2,3,4],4,1))\nexcept Exception as e:\n    print(e)\n\nassert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4\ndef last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res\ndef count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count \nimport heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "func_error": "get_Position"}
{"code": "def volume_cylinder(radius, height):\n    import math\n    return math.pi * radius ** 2 * height\n\ntry:\n    print(volume_cylinder(10,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(volume_cylinder(4,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(volume_cylinder(4,10))\nexcept Exception as e:\n    print(e)\n\nassert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004\ndef smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i\ndef rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter\ndef count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "func_error": "volume_cylinder"}
{"code": "def dict_filter(input_dict, threshold):\n    return {k: v for k, v in input_dict.items() if v > threshold}\n\ntry:\n    print(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190))\nexcept Exception as e:\n    print(e)\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\ndef check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) \nfrom operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result\ndef area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "func_error": "dict_filter"}
{"code": "def count_first_elements(input_tuple):\n    if not input_tuple:\n        return 0\n    first_element = input_tuple[0]\n    count = 0\n    for element in input_tuple:\n        if element == first_element:\n            count += 1\n    return count - 1\n\ntry:\n    print(count_first_elements((1, 5, 7, (4, 6), 10) ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_first_elements((2, 9, (5, 7), 11) ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_first_elements((11, 15, 5, 8, (2, 3), 8) ))\nexcept Exception as e:\n    print(e)\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\ndef rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False\ndef count_list(input_list): \r\n    return len(input_list)", "func_error": "count_first_elements"}
{"code": "def max_sub_array_sum_repeated(arr, k, n):\n    def kadane(array):\n        max_sum = current_sum = array[0]\n        for num in array[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    if k == 1:\n        return kadane(arr)\n\n    max_kadane = kadane(arr)\n\n    total_sum = sum(arr)\n    max_prefix = float('-inf')\n    current_prefix = 0\n    for i in range(n):\n        current_prefix += arr[i]\n        max_prefix = max(max_prefix, current_prefix)\n\n    max_suffix = float('-inf')\n    current_suffix = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix += arr[i]\n        max_suffix = max(max_suffix, current_suffix)\n\n    if total_sum > 0:\n        return max(max_kadane, max_suffix + (k - 2) * total_sum + max_prefix)\n    else:\n        return max(max_kadane, max_suffix + max_prefix)\n\ntry:\n    print(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))\nexcept Exception as e:\n    print(e)\n\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\ndef is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False\ndef sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)\ndef adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "func_error": "max_sub_array_sum_repeated"}
{"code": "def modular_inverse(array, p, n):\n    def mod_inverse(x, p):\n        return pow(x, p - 2, p)\n\n    count = 0\n    for num in array:\n        if mod_inverse(num, p) == num % p:\n            count += 1\n    return count\n\ntry:\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(modular_inverse([1, 3, 8, 12, 12], 5, 13))\nexcept Exception as e:\n    print(e)\ntry:\n    print(modular_inverse([2, 3, 4, 5], 4, 6))\nexcept Exception as e:\n    print(e)\n\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1\ndef check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) \ndef min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]\ndef count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even", "func_error": "modular_inverse"}
{"code": "def odd_Days(year):\n    if year < 0:\n        return \"Invalid year\"\n    \n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return 0  # Leap year\n            else:\n                return 1  # Not a leap year\n        else:\n            return 0  # Leap year\n    else:\n        return 1  # Not a leap year\n\ntry:\n    print(odd_Days(100))\nexcept Exception as e:\n    print(e)\ntry:\n    print(odd_Days(50))\nexcept Exception as e:\n    print(e)\ntry:\n    print(odd_Days(75))\nexcept Exception as e:\n    print(e)\n\nassert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum\ndef largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)\ndef equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1", "func_error": "odd_Days"}
{"code": "def max_length(lists):\n    max_len = 0\n    max_lists = []\n    \n    for lst in lists:\n        current_len = len(lst)\n        if current_len > max_len:\n            max_len = current_len\n            max_lists = [lst]\n        elif current_len == max_len:\n            max_lists.append(lst)\n    \n    return (max_len, max_lists)\n\ntry:\n    print(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_length([[1], [5, 7], [10, 12, 14,15]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_length([[5], [15,20,25]]))\nexcept Exception as e:\n    print(e)\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t\ndef tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) \ndef sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "func_error": "max_length"}
{"code": "def sum_div(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ntry:\n    print(sum_div(8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_div(12))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_div(7))\nexcept Exception as e:\n    print(e)\n\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1\ndef Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); \nimport math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean\ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "func_error": "sum_div"}
{"code": "def count_binary_seq(n):\n    # Calculate the total count of binary sequences of length 2n\n    total_sequences = 2 ** (2 * n)\n    \n    # The number of valid sequences where the sum of the first n bits equals the sum of the last n bits\n    # This can be done using combinations: C(n, k), where k is the number of 1s (half of the total ones in 2n)\n    # where 0 <= k <= n and must be equal for both halves.\n    \n    row = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, 0, -1):\n            row[j] = row[j] + row[j - 1]\n    \n    count = sum(row[k] ** 2 for k in range(n + 1))\n    \n    return float(count)\n\ntry:\n    print(count_binary_seq(1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_binary_seq(2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_binary_seq(3))\nexcept Exception as e:\n    print(e)\n\nassert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0\ndef count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n\ndef check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True\ndef max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]", "func_error": "count_binary_seq"}
{"code": "def solve(arr, n):\n    def merge_count_split_inv(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n  \n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n  \n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n  \n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n  \n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n              \n        return inv_count\n  \n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n  \n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right)\n  \n        return inv_count\n  \n    temp_arr = [0] * n\n    inversion_count = merge_sort_and_count(arr, temp_arr, 0, n - 1)\n  \n    return inversion_count % 2 == 0\n\ntry:\n    print(solve([1,0,2],3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(solve([1,2,0],3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(solve([1,2,1],3))\nexcept Exception as e:\n    print(e)\n\nassert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True\nfrom itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\ndef max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) \ndef find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "func_error": "solve"}
{"code": "def find_Element(arr, rotations, index, n):\n    if not arr or n <= 0 or index < 0 or index >= n:\n        return -1\n    \n    effective_rotations = rotations % n\n    new_index = (index - effective_rotations + n) % n\n    return arr[new_index]\n\ntry:\n    print(find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Element([1,2,3,4],[[0,1],[0,2]],1,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1))\nexcept Exception as e:\n    print(e)\n\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\ndef mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)\ndef count_list(input_list): \r\n    return len(input_list)\ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "func_error": "find_Element"}
{"code": "def start_withp(words):\n    matching_words = [word for word in words if word.startswith('p')]\n    if len(matching_words) >= 2:\n        return (matching_words[0], matching_words[1])\n    return None\n\ntry:\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(start_withp([\"Python Programming\",\"Java Programming\"]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(start_withp([\"Pqrst Pqr\",\"qrstuv\"]))\nexcept Exception as e:\n    print(e)\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\ndef is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)\ndef Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li\ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "func_error": "start_withp"}
{"code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i < 0 or k >= n or i >= k:\n        return 0\n\n    max_sum = 0\n    current_sum = 0\n    \n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            current_sum += arr[j]\n    \n    current_sum += arr[k]\n    \n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, current_sum - arr[j])\n    \n    return max_sum + current_sum\n\ntry:\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))\nexcept Exception as e:\n    print(e)\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\ndef remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) \ndef check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) \ndef check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "func_error": "max_sum_increasing_subseq"}
{"code": "def colon_tuplex(input_tuple, start_index, end_index):\n    if isinstance(input_tuple, tuple) and len(input_tuple) == 4:\n        return (input_tuple[0], input_tuple[1], input_tuple[2][start_index:end_index], input_tuple[3])\n    return None\n\ntry:\n    print(colon_tuplex((\"HELLO\", 5, [], True) ,2,50))\nexcept Exception as e:\n    print(e)\ntry:\n    print(colon_tuplex((\"HELLO\", 5, [], True) ,2,100))\nexcept Exception as e:\n    print(e)\ntry:\n    print(colon_tuplex((\"HELLO\", 5, [], True) ,2,500))\nexcept Exception as e:\n    print(e)\n\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\nfrom operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result\nfrom collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "func_error": "colon_tuplex"}
{"code": "def string_to_tuple(str):\n    return tuple(str.split(','))\n\ntry:\n    print(string_to_tuple(\"python 3.0\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(string_to_tuple(\"item1\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(string_to_tuple(\"15.10\"))\nexcept Exception as e:\n    print(e)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\ndef get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item\ndef remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) \ndef pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "func_error": "string_to_tuple"}
{"code": "def set_left_most_unset_bit(number):\n    if number < 0:\n        return number\n    bit_position = 0\n    while (number & (1 << bit_position)) != 0:\n        bit_position += 1\n    return number | (1 << bit_position)\n\ntry:\n    print(set_left_most_unset_bit(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(set_left_most_unset_bit(12))\nexcept Exception as e:\n    print(e)\ntry:\n    print(set_left_most_unset_bit(15))\nexcept Exception as e:\n    print(e)\n\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\ndef divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\nimport math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian\ndef nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "func_error": "set_left_most_unset_bit"}
{"code": "def volume_cone(radius, height):\n    import math\n    return (1/3) * math.pi * (radius ** 2) * height\n\ntry:\n    print(volume_cone(5,12))\nexcept Exception as e:\n    print(e)\ntry:\n    print(volume_cone(10,15))\nexcept Exception as e:\n    print(e)\ntry:\n    print(volume_cone(19,17))\nexcept Exception as e:\n    print(e)\n\nassert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521\ndef remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) \nfrom heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists\nfrom itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "func_error": "volume_cone"}
{"code": "def pos_nos(input_list):\n    return tuple(str(num) for num in input_list if num > 0)\n\ntry:\n    print(pos_nos([-1,-2,1,2]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(pos_nos([3,4,-5]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(pos_nos([-2,-3,1]))\nexcept Exception as e:\n    print(e)\n\nassert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1\nimport math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1\ndef check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "func_error": "pos_nos"}
{"code": "def find_Max_Len_Even(str):\n    words = str.split()\n    max_len = -1\n    \n    for word in words:\n        if len(word) % 2 == 0:\n            max_len = max(max_len, len(word))\n    \n    if max_len == -1:\n        return '-1'\n    \n    return 'length' if max_len else 'language'\n\ntry:\n    print(find_Max_Len_Even(\"python language\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Max_Len_Even(\"maximum even length\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Max_Len_Even(\"eve\"))\nexcept Exception as e:\n    print(e)\n\nassert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum\ndef return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum\ndef Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "func_error": "find_Max_Len_Even"}
{"code": "def modified_encode(input_list, separator):\n    from collections import defaultdict\n    \n    if not input_list:\n        return []\n    \n    result = []\n    count_dict = defaultdict(int)\n    \n    for item in input_list:\n        count_dict[item] += 1\n    \n    for key, count in count_dict.items():\n        if count > 1:\n            result.append([count, key])\n        else:\n            result.append(str(key))\n    \n    return separator.join(map(str, result))\n\ntry:\n    print(modified_encode([1,1,2,3,4,4,5,1]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(modified_encode('automatically'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(modified_encode('python'))\nexcept Exception as e:\n    print(e)\n\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']\ndef check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)\ndef find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "func_error": "modified_encode"}
{"code": "def max_volume(s):\n    # The sum of the sides of a cuboid is given by 4*(l + w + h) = s\n    # Therefore, l + w + h = s / 4\n    # We need to maximize the volume V = l * w * h\n    \n    if s <= 0:\n        return 0\n\n    p = s / 4\n    # To maximize l * w * h under the constraint l + w + h = p,\n    # we can set l = w = h = p / 3 for maximum volume\n    \n    l = w = h = p / 3\n    max_vol = l * w * h\n    return int(max_vol)\n\ntry:\n    print(max_volume(8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_volume(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_volume(1))\nexcept Exception as e:\n    print(e)\n\nassert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0\ndef add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)\ndef heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n\ndef mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "func_error": "max_volume"}
{"code": "def find_demlo(num_str):\n    if not num_str.isdigit():\n        return \"Invalid Input\"\n    \n    n = len(num_str)\n    demlo = True\n    \n    for i in range(n):\n        digit = int(num_str[i])\n        if digit != (i + 1) % 10:\n            demlo = False\n            break\n    \n    return \"Demlo Number\" if demlo else \"Not a Demlo Number\"\n\ntry:\n    print(find_demlo(\"111111\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_demlo(\"1111\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_demlo(\"13333122222\"))\nexcept Exception as e:\n    print(e)\n\nassert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'\ndef even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False\ndef lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm\ndef sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums", "func_error": "find_demlo"}
{"code": "def re_arrange(arr, n):\n    pos = [x for x in arr if x >= 0]\n    neg = [x for x in arr if x < 0]\n    \n    pos_index, neg_index = 0, 0\n    result = []\n    \n    for i in range(n):\n        if i % 2 == 0 and pos_index < len(pos):\n            result.append(pos[pos_index])\n            pos_index += 1\n        elif i % 2 != 0 and neg_index < len(neg):\n            result.append(neg[neg_index])\n            neg_index += 1\n            \n    result.extend(pos[pos_index:])\n    result.extend(neg[neg_index:])\n    \n    return result\n\ntry:\n    print(re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(re_arrange([1, 2, 3, -4, -1, 4], 6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8))\nexcept Exception as e:\n    print(e)\n\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\ndef tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) \ndef cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)\ndef filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "func_error": "re_arrange"}
{"code": "def sum_of_alternates(input_tuples):\n    sum1 = sum(sum(t) for t in input_tuples[::2])\n    sum2 = sum(sum(t) for t in input_tuples[1::2])\n    return (sum1, sum2)\n\ntry:\n    print(sum_of_alternates((5, 6, 3, 6, 10, 34)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_of_alternates((1, 2, 3, 4, 5)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_of_alternates((6, 7, 8, 9, 4, 5)))\nexcept Exception as e:\n    print(e)\n\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)\ndef reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) \nimport re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)\ndef Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "func_error": "sum_of_alternates"}
{"code": "def rotate_left(lst, n, length):\n    n = n % length  # handle cases where n is greater than length\n    return lst[n:] + lst[:n]\n\ntry:\n    print(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2))\nexcept Exception as e:\n    print(e)\n\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\ndef min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) \ndef mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)\nimport cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "func_error": "rotate_left"}
{"code": "def ap_sum(first, difference, terms):\n    return terms * (2 * first + (terms - 1) * difference) // 2\n\ntry:\n    print(ap_sum(1,5,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(ap_sum(2,6,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(ap_sum(1,4,5))\nexcept Exception as e:\n    print(e)\n\nassert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34\ndef min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2\ndef is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False\ndef remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "func_error": "ap_sum"}
{"code": "def text_match_word(input_str):\n    import re\n    if re.search(r'\\bword\\b[.,!?;]?\\s*$', input_str):\n        return 'Found a match!'\n    return 'Not matched!'\n\ntry:\n    print(text_match_word(\"python.\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_word(\"python.\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_word(\"  lang  .\"))\nexcept Exception as e:\n    print(e)\n\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')\ndef lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]\ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result\ndef check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False", "func_error": "text_match_word"}
{"code": "def find_Divisor(start, end):\n    divisor_count = {}\n    \n    for num in range(start, end + 1):\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in divisor_count:\n                    divisor_count[i] += 1\n                else:\n                    divisor_count[i] = 1\n                    \n    max_occurrences = 0\n    max_divisor = 1\n    \n    for divisor, count in divisor_count.items():\n        if count > max_occurrences or (count == max_occurrences and divisor > max_divisor):\n            max_occurrences = count\n            max_divisor = divisor\n            \n    return max_divisor\n\ntry:\n    print(find_Divisor(2,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Divisor(2,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_Divisor(5,10))\nexcept Exception as e:\n    print(e)\n\nassert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2\ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False\ndef rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "func_error": "find_Divisor"}
{"code": "def dig_let(str):\n    digits = sum(c.isdigit() for c in str)\n    letters = sum(c.isalpha() for c in str)\n    return (digits, letters)\n\ntry:\n    print(dig_let(\"python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dig_let(\"program\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(dig_let(\"python3.0\"))\nexcept Exception as e:\n    print(e)\n\nassert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)\ndef get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) \nfrom collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char\ndef sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "func_error": "dig_let"}
{"code": "def count_Odd_Squares(start, end):\n    odd_square_count = 0\n    for num in range(start, end + 1):\n        sqrt = int(num**0.5)\n        if sqrt * sqrt == num and sqrt % 2 != 0:\n            odd_square_count += 1\n    return odd_square_count\n\ntry:\n    print(count_Odd_Squares(5,100))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Odd_Squares(8,65))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Odd_Squares(2,5))\nexcept Exception as e:\n    print(e)\n\nassert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1\ndef jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]\ndef remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp\ndef rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter", "func_error": "count_Odd_Squares"}
{"code": "def zigzag(n, k):\n    if k == 0:\n        return 1\n    if n == 0:\n        return 0\n    return k * zigzag(n - 1, k) + zigzag(n - 1, k - 1)\n\ntry:\n    print(zigzag(4, 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(zigzag(4, 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(zigzag(3, 1))\nexcept Exception as e:\n    print(e)\n\nassert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1\ndef join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) \nimport re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)", "func_error": "zigzag"}
{"code": "def find_ways(n):\n    values = [1, 2, 3]  # Example values to generate sequences\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for value in values:\n            if i - value >= 0:\n                dp[i] += dp[i - value]\n\n    return dp[n]\n\ntry:\n    print(find_ways(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_ways(6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_ways(8))\nexcept Exception as e:\n    print(e)\n\nassert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14\ndef reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists \ndef get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2\nM = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "func_error": "find_ways"}
{"code": "def first_Element(arr, k, n):\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n        if count[i] == k:\n            return i\n    return -1\n\ntry:\n    print(first_Element([0,1,2,3,4,5],6,1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_Element([1,2,1,3,4],5,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_Element([2,3,4,3,5,7,1,2,3,5],10,2))\nexcept Exception as e:\n    print(e)\n\nassert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True\ndef word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False\nimport re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "func_error": "first_Element"}
{"code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d\n\ntry:\n    print(tn_ap(1,5,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tn_ap(2,6,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tn_ap(1,4,5))\nexcept Exception as e:\n    print(e)\n\nassert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16\ndef listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result \ndef get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "func_error": "tn_ap"}
{"code": "def count_Rectangles(r):\n    if r <= 0:\n        return 0\n    \n    count = 0\n    for x in range(-r, r + 1):\n        for y in range(-r, r + 1):\n            if x**2 + y**2 <= r**2:\n                count += 1\n                \n    return count * 4  # Count for all quadrants\n\ntry:\n    print(count_Rectangles(2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Rectangles(1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_Rectangles(0))\nexcept Exception as e:\n    print(e)\n\nassert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0\ndef sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result\nimport re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "func_error": "count_Rectangles"}
{"code": "def get_carol(n):\n    if n < 1:\n        return 0\n    return (1 << n) - 1 - (1 << (n - 1))\n\ntry:\n    print(get_carol(2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_carol(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_carol(5))\nexcept Exception as e:\n    print(e)\n\nassert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959\nimport re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))\ndef harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "func_error": "get_carol"}
{"code": "def max_occurrences(lst):\n    from collections import Counter\n    if not lst:\n        return ()\n    counter = Counter(lst)\n    max_count = max(counter.values())\n    max_items = tuple(key for key, count in counter.items() if count == max_count)\n    return max_items\n\ntry:\n    print(max_occurrences([1,2,3,1,2,3,12,4,2]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_occurrences([1,2,6,7,0,1,0,1,0]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_occurrences([1,2,3,1,2,4,1]))\nexcept Exception as e:\n    print(e)\n\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1\ndef sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1\ndef remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result\ndef is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "func_error": "max_occurrences"}
{"code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        \n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1\n\ntry:\n    print(is_tree_balanced(root))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_tree_balanced(root1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_tree_balanced(root2))\nexcept Exception as e:\n    print(e)\n\nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False\ndef get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\ndef fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm \ndef all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "func_error": null}
{"code": "def repeat_tuples(tuple, n):\n    return tuple * n\n\n# Example calls for clarity (if needed) but won't be included in the output:\n# repeat_tuples((1, 3), 4) would output ((1, 3), (1, 3), (1, 3), (1, 3))\n# repeat_tuples((1, 2), 3) would output ((1, 2), (1, 2), (1, 2))\n# repeat_tuples((3, 4), 5) would output ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n\ntry:\n    print(repeat_tuples((1, 3), 4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(repeat_tuples((1, 2), 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(repeat_tuples((3, 4), 5))\nexcept Exception as e:\n    print(e)\n\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\nimport math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; \ndef sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)\nimport re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "func_error": "repeat_tuples"}
{"code": "def float_sort(input_list):\n    return sorted(input_list, key=lambda x: float(x[1]))\n\ntry:\n    print(float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')]))\nexcept Exception as e:\n    print(e)\n\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')]\nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')]\ndef min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") \ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1\nimport math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "func_error": "float_sort"}
{"code": "def permute_string(s):\n    if len(s) == 0:\n        return [\"\"]\n\n    result = set()\n\n    for i in range(len(s)):\n        for perm in permute_string(s[:i] + s[i+1:]):\n            result.add(s[i] + perm)\n\n    return list(result)\n\ntry:\n    print(permute_string('ab'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(permute_string('abc'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(permute_string('abcd'))\nexcept Exception as e:\n    print(e)\n\nassert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\ndef sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False\nfrom operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result\ndef max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "func_error": "permute_string"}
{"code": "def round_num(number, multiple):\n    if multiple == 0:\n        return number\n    return round(number / multiple) * multiple\n\ntry:\n    print(round_num(4722,10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(round_num(1111,5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(round_num(219,2))\nexcept Exception as e:\n    print(e)\n\nassert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218\ndef floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B\ndef discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "func_error": "round_num"}
{"code": "def remove_replica(input_tuple):\n    seen = {}\n    for item in input_tuple:\n        if item in seen:\n            seen[item] += 1\n        else:\n            seen[item] = 1\n    result = tuple(item if seen[item] == 1 else 'MSP' for item in input_tuple)\n    return result\n\ntry:\n    print(remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)))\nexcept Exception as e:\n    print(e)\n\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\ndef add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) \ndef lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]\ndef find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "func_error": "remove_replica"}
{"code": "def multi_list(rows, cols):\n    return [[0 for _ in range(cols)] for _ in range(rows)]\n\ntry:\n    print(multi_list(3,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(multi_list(5,7))\nexcept Exception as e:\n    print(e)\ntry:\n    print(multi_list(10,15))\nexcept Exception as e:\n    print(e)\n\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\ndef min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") \ndef get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count\ndef access_key(ditionary,key):\r\n  return list(ditionary)[key]", "func_error": "multi_list"}
{"code": "def even_bit_toggle_number(num):\n    mask = 0xAAAAAAAA  # Mask for odd bits (bits at positions 1, 3, 5, ...)\n    return num ^ mask\n\ntry:\n    print(even_bit_toggle_number(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(even_bit_toggle_number(20))\nexcept Exception as e:\n    print(e)\ntry:\n    print(even_bit_toggle_number(30))\nexcept Exception as e:\n    print(e)\n\nassert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\nfrom collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d\ndef is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False", "func_error": "even_bit_toggle_number"}
{"code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 1)\n\ntry:\n    print(get_perrin(9))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_perrin(4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_perrin(6))\nexcept Exception as e:\n    print(e)\n\nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5\ndef min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]\nimport re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "func_error": "get_perrin"}
{"code": "def swap_count(str):\n    balance = 0\n    swap_needed = 0\n    \n    for char in str:\n        if char == '{':\n            balance += 1\n        else:  # char == '}'\n            balance -= 1\n\n        if balance < 0:\n            swap_needed += 1\n            balance = 0\n\n    return swap_needed + balance // 2\n\ntry:\n    print(swap_count(\"[]][][\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(swap_count(\"[[][]]\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(swap_count(\"[[][]]][\"))\nexcept Exception as e:\n    print(e)\n\nassert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1\nfrom collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) \ndef is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False\ndef count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "func_error": "swap_count"}
{"code": "def add_string(items, prefix):\n    return [f\"{prefix}{item}\" for item in items]\n\ntry:\n    print(add_string([1,2,3,4],'temp{0}'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(add_string(['a','b','c','d'], 'python{0}'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(add_string([5,6,7,8],'string{0}'))\nexcept Exception as e:\n    print(e)\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t\ndef concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) \ndef lcopy(xs):\n  return xs[:]\n", "func_error": "add_string"}
{"code": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        entry = {\n            'key1': list1[i],\n            'key2': list2[i],\n            'key3': list3[i]\n        }\n        result.append(entry)\n    return result\n\ntry:\n    print(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40]))\nexcept Exception as e:\n    print(e)\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\ndef sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) \nimport re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)\nimport sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ", "func_error": "convert_list_dictionary"}
{"code": "def first_non_repeating_character(str):\n    char_count = {}\n    for char in str:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in str:\n        if char_count[char] == 1:\n            return char\n    \n    return \"\"\n\ntry:\n    print(first_non_repeating_character(\"abcabc\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_non_repeating_character(\"abc\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_non_repeating_character(\"ababc\"))\nexcept Exception as e:\n    print(e)\n\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\nfrom itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) \ndef check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) \nimport cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length", "func_error": "first_non_repeating_character"}
{"code": "import re\n\ndef check_char(str):\n    if re.match(r'^(?P<first>.)(.*)(?P=first)$', str):\n        return 'Valid'\n    else:\n        return 'Invalid'\n\ntry:\n    print(check_char(\"abba\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_char(\"a\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_char(\"abcd\"))\nexcept Exception as e:\n    print(e)\n\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"\ndef remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l\ndef average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result\ndef even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "func_error": null}
{"code": "def sum_of_digits(list1, list2, list3):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)) if digit.isdigit())\n\n    total_sum = 0\n    \n    for number in list1:\n        total_sum += digit_sum(number)\n    \n    for sublist in list2:\n        for item in sublist:\n            total_sum += digit_sum(item)\n    \n    for number in list3:\n        total_sum += digit_sum(number)\n    \n    return total_sum\n\ntry:\n    print(sum_of_digits([10,2,56]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_of_digits([[10,20,4,5,'b',70,'a']]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_of_digits([10,20,-4,5,-70]))\nexcept Exception as e:\n    print(e)\n\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\nimport re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string \nimport re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") \ndef min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ", "func_error": "sum_of_digits"}
{"code": "def extract_freq(tuples_list):\n    frequency = {}\n    \n    for item in tuples_list:\n        item_sorted = tuple(sorted(item))\n        if item_sorted in frequency:\n            frequency[item_sorted] += 1\n        else:\n            frequency[item_sorted] = 1\n    \n    return sum(frequency.values())\n\ntry:\n    print(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ))\nexcept Exception as e:\n    print(e)\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\nimport math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \ndef dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\ndef sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "func_error": "extract_freq"}
{"code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n\n    # Function to compute x^y under modulo p\n    def power(x, y, p):\n        res = 1  \n        x = x % p  \n        while y > 0:\n            if (y & 1):  # If y is odd\n                res = (res * x) % p\n            y = y >> 1  # y = y // 2\n            x = (x * x) % p  \n        return res\n\n    # Function to compute nCr % p\n    def nCr(n, r, p):\n        if r == 0:\n            return 1\n        fac = [1] * (n + 1)\n        for i in range(2, n + 1):\n            fac[i] = fac[i - 1] * i % p\n\n        return (fac[n] * power(fac[r], p - 2, p) % p * power(fac[n - r], p - 2, p) % p) % p\n\n    return nCr(n, r, p)\n\ntry:\n    print(ncr_modp(10,2,13))\nexcept Exception as e:\n    print(e)\ntry:\n    print(ncr_modp(15,12,43))\nexcept Exception as e:\n    print(e)\ntry:\n    print(ncr_modp(17,9,18))\nexcept Exception as e:\n    print(e)\n\nassert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10\ndef pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp\nfrom collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char\ndef sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n", "func_error": "ncr_modp"}
{"code": "def k_smallest_pairs(nums1, nums2, k):\n    import heapq\n\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n\n    return [[x[1], x[2]] for x in min_heap]\n\ntry:\n    print(k_smallest_pairs([1,3,7],[2,4,6],2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(k_smallest_pairs([1,3,7],[2,4,6],1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(k_smallest_pairs([1,3,7],[2,4,6],7))\nexcept Exception as e:\n    print(e)\n\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\ndef convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) \nfrom collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char\nimport re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "func_error": "k_smallest_pairs"}
{"code": "def snake_to_camel(str):\n    import re\n    components = str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n\ntry:\n    print(snake_to_camel('android_tv'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(snake_to_camel('google_pixel'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(snake_to_camel('apple_watch'))\nexcept Exception as e:\n    print(e)\n\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'\ndef check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False\nMAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)\ndef tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ", "func_error": "snake_to_camel"}
{"code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return (max1, max2)\n\ntry:\n    print(max_Product([1,2,3,4,7,0,8,4]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_Product([0,-1,-2,-4,5,0,-6]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(max_Product([1,2,3]))\nexcept Exception as e:\n    print(e)\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\nimport re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\ndef min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) \ndef coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "func_error": "max_Product"}
{"code": "def breakSum(n):\n    if n <= 0:\n        return 0\n    max_sum = n\n    for i in range(1, n):\n        current_sum = breakSum(i) + breakSum(n - i)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\ntry:\n    print(breakSum(12))\nexcept Exception as e:\n    print(e)\ntry:\n    print(breakSum(24))\nexcept Exception as e:\n    print(e)\ntry:\n    print(breakSum(23))\nexcept Exception as e:\n    print(e)\n\nassert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23\ndef find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) \ndef left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  \ndef smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ", "func_error": "breakSum"}
{"code": "def group_tuples(tuples_list):\n    from collections import defaultdict\n    \n    common_first = defaultdict(int)\n    \n    for item in tuples_list:\n        if item:\n            common_first[item[0]] += 1\n\n    highest_count = max(common_first.values(), default=0)\n    first_elements = [key for key, count in common_first.items() if count == highest_count]\n\n    return [(element,) for element in first_elements]\n\ntry:\n    print(group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]))\nexcept Exception as e:\n    print(e)\n\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\ndef float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) \nimport sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) \ndef mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)", "func_error": "group_tuples"}
{"code": "def Find_Max(string_lists, int_lists):\n    max_length = 0\n    max_list = []\n    \n    for lst in string_lists + int_lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n            \n    return max_list\n\ntry:\n    print(Find_Max([['A'],['A','B'],['A','B','C']]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(Find_Max([[1],[1,2],[1,2,3]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(Find_Max([[1,1],[1,2,3],[1,5,6,1]]))\nexcept Exception as e:\n    print(e)\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\ndef sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)\ndef sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n\ndef product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "func_error": "Find_Max"}
{"code": "def concatenate_tuple(tuple):\n    delimiter = \", \"\n    return delimiter.join(str(item) for item in tuple)\n\ntry:\n    print(concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ))\nexcept Exception as e:\n    print(e)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\ndef harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))\ndef fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\ndef subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "func_error": "concatenate_tuple"}
{"code": "def get_maxgold(gold, m, n):\n    dp = [[0] * n for _ in range(m)]\n    \n    for j in range(n):\n        dp[0][j] = gold[0][j]\n\n    for i in range(1, m):\n        for j in range(n):\n            up = dp[i - 1][j] if j < n else 0\n            left_up = dp[i - 1][j - 1] if j > 0 else 0\n            right_up = dp[i - 1][j + 1] if j < n - 1 else 0\n            \n            dp[i][j] = gold[i][j] + max(up, left_up, right_up)\n    \n    return max(dp[m - 1])\n\ntry:\n    print(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_maxgold([[10,20],[30,40]],2,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(get_maxgold([[4,9],[3,7]],2,2))\nexcept Exception as e:\n    print(e)\n\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13\nimport itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate\ndef check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) \ndef min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "func_error": "get_maxgold"}
{"code": "def count_element_in_list(input_list, element, str_list, str_element):\n    count = 0\n    for sublist in input_list:\n        if element in sublist:\n            count += 1\n    return count\n\ntry:\n    print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E'))\nexcept Exception as e:\n    print(e)\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\ndef min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) \nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]\ndef mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "func_error": "count_element_in_list"}
{"code": "def parabola_directrix(a, b, c):\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola.\")\n    p = 1 / (4 * abs(a))\n    if a > 0:\n        return int(-(b / (2 * a)) - p)\n    else:\n        return int(-(b / (2 * a)) + p)\n\ntry:\n    print(parabola_directrix(5,3,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(parabola_directrix(9,8,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(parabola_directrix(2,4,6))\nexcept Exception as e:\n    print(e)\n\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem\ndef check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False\ndef triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "func_error": "parabola_directrix"}
{"code": "def common_element(list1, list2, list3, list4):\n    set1 = set(list1) | set(list3)\n    set2 = set(list2) | set(list4)\n    return 'True' if set1 & set2 else 'None'\n\ntry:\n    print(common_element([1,2,3,4,5], [5,6,7,8,9]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(common_element([1,2,3,4,5], [6,7,8,9]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(common_element(['a','b','c'], ['d','b','e']))\nexcept Exception as e:\n    print(e)\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True\ndef div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)\ndef is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t\ndef check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ", "func_error": "common_element"}
{"code": "def text_match_one(string):\n    import re\n    if re.fullmatch(r'a+b+', string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\ntry:\n    print(text_match_one(\"ac\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_one(\"dc\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(text_match_one(\"abba\"))\nexcept Exception as e:\n    print(e)\n\nassert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')\ndef cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum\ndef area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area\ndef remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "func_error": "text_match_one"}
{"code": "def neg_nos(numbers):\n    return tuple(num for num in numbers if num < 0)\n\ntry:\n    print(neg_nos([-1,4,5,-6]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(neg_nos([-1,-2,3,4]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(neg_nos([-7,-6,8,9]))\nexcept Exception as e:\n    print(e)\n\nassert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6\ndef sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)\nimport re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "func_error": "neg_nos"}
{"code": "def remove_odd(str):\n    return ''.join([char for index, char in enumerate(str) if index % 2 == 0])\n\ntry:\n    print(remove_odd(\"python\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_odd(\"program\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_odd(\"language\"))\nexcept Exception as e:\n    print(e)\n\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\ndef is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False\ndef unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')\ndef new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "func_error": "remove_odd"}
{"code": "def count_bidirectional(pairs):\n    count = 0\n    seen = set()\n    for a, b in pairs:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n    return str(count)\n\ntry:\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ))\nexcept Exception as e:\n    print(e)\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\ndef reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists \ndef unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result\ndef re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "func_error": "count_bidirectional"}
{"code": "def find_adverb_position(sentence):\n    import nltk\n    from nltk import pos_tag\n    from nltk.tokenize import word_tokenize\n    \n    nltk.download('punkt', quiet=True)\n    nltk.download('averaged_perceptron_tagger', quiet=True)\n    \n    tokens = word_tokenize(sentence)\n    tagged = pos_tag(tokens)\n    \n    adverbs = [(i, token) for i, (token, tag) in enumerate(tagged) if tag in ('RB', 'RBR', 'RBS')]\n    \n    return tuple(adverbs) if adverbs else ()\n\ntry:\n    print(find_adverb_position(\"clearly!! we can see the sky\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_adverb_position(\"seriously!! there are many roses\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_adverb_position(\"unfortunately!! sita is going to home\"))\nexcept Exception as e:\n    print(e)\n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\nimport re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result\ndef discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)\ndef remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "func_error": "find_adverb_position"}
{"code": "def positive_count(numbers):\n    if not numbers:\n        return 0.0\n    positive_count = sum(1 for num in numbers if num > 0)\n    return positive_count / len(numbers)\n\ntry:\n    print(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))\nexcept Exception as e:\n    print(e)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\ndef find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans\ndef max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result\nimport bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "func_error": "positive_count"}
{"code": "def largest_neg(numbers):\n    largest_negative = None\n    for num in numbers:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n    return largest_negative\n\ntry:\n    print(largest_neg([1,2,3,-4,-6]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(largest_neg([1,2,3,-8,-9]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(largest_neg([1,2,3,4,-1]))\nexcept Exception as e:\n    print(e)\n\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1\ndef find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1\nfrom collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "func_error": "largest_neg"}
{"code": "def trim_tuple(tuple_list, k):\n    return str([t[k:] for t in tuple_list])\n\ntry:\n    print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1))\nexcept Exception as e:\n    print(e)\n\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\nfrom itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n\ndef check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False\ndef max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum", "func_error": "trim_tuple"}
{"code": "def index_multiplication(tuple1, tuple2):\n    return tuple((a * b for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(tuple1, tuple2))\n\ntry:\n    print(index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ))\nexcept Exception as e:\n    print(e)\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\ndef last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res\ndef remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1\ndef str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ", "func_error": "index_multiplication"}
{"code": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    perrin = [3, 0, 2]\n    sum_perrin = 5 if n > 2 else sum(perrin[:n])\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 1]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n    return sum_perrin\n\ntry:\n    print(cal_sum(9))\nexcept Exception as e:\n    print(e)\ntry:\n    print(cal_sum(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(cal_sum(11))\nexcept Exception as e:\n    print(e)\n\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\nimport re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False\nimport math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)\nfrom itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs", "func_error": "cal_sum"}
{"code": "def loss_amount(cost_price, selling_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    return None\n\ntry:\n    print(loss_amount(1500,1200))\nexcept Exception as e:\n    print(e)\ntry:\n    print(loss_amount(100,200))\nexcept Exception as e:\n    print(e)\ntry:\n    print(loss_amount(2000,5000))\nexcept Exception as e:\n    print(e)\n\nassert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000\nimport math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \ndef min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2\ndef get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "func_error": "loss_amount"}
{"code": "def Find_Min(int_lists, str_lists):\n    min_length = float('inf')\n    min_list = None\n    \n    for lst in int_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n            \n    for lst in str_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n            \n    return min_list if min_list is not None else []\n\ntry:\n    print(Find_Min([[1],[1,2],[1,2,3]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(Find_Min([[1,1],[1,1,1],[1,2,7,8]]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(Find_Min([['x'],['x','y'],['x','y','z']]))\nexcept Exception as e:\n    print(e)\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\ndef Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); \ndef new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) \ndef find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ", "func_error": "Find_Min"}
{"code": "def remove_uppercase(s):\n    import re\n    return re.sub(r'\\b[A-Z]+\\b', '', s).strip()\n\ntry:\n    print(remove_uppercase('cAstyoUrFavoRitETVshoWs'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_uppercase('wAtchTheinTernEtrAdIo'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_uppercase('VoicESeaRchAndreComMendaTionS'))\nexcept Exception as e:\n    print(e)\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\ndef find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans \ndef Average(lst): \r\n    return sum(lst) / len(lst) \nimport re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "func_error": "remove_uppercase"}
{"code": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\ntry:\n    print(upper_ctr('PYthon'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(upper_ctr('BigData'))\nexcept Exception as e:\n    print(e)\ntry:\n    print(upper_ctr('program'))\nexcept Exception as e:\n    print(e)\n\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0\nimport re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); \nimport re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "func_error": "upper_ctr"}
{"code": "def combinations_list(input_list):\n    def backtrack(start, path):\n        result.append(path)\n        for i in range(start, len(input_list)):\n            backtrack(i + 1, path + [input_list[i]])\n\n    result = []\n    backtrack(0, [])\n    return result\n\ntry:\n    print(combinations_list(['orange', 'red', 'green', 'blue']))\nexcept Exception as e:\n    print(e)\ntry:\n    print(combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange']))\nexcept Exception as e:\n    print(e)\ntry:\n    print(combinations_list(['red', 'green', 'black', 'orange']))\nexcept Exception as e:\n    print(e)\n\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\ndef check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False\ndef rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result\ndef Extract(lst): \r\n    return [item[-1] for item in lst] ", "func_error": "combinations_list"}
{"code": "def check_value(dict, int):\n    if not dict:\n        return 'True'\n    first_value = next(iter(dict.values()))\n    for value in dict.values():\n        if value != first_value:\n            return 'False'\n    return 'True'\n\ntry:\n    print(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12))\nexcept Exception as e:\n    print(e)\ntry:\n    print(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5))\nexcept Exception as e:\n    print(e)\n\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\nimport re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)\ndef tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) \ndef len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "func_error": "check_value"}
{"code": "def find_peak(arr, n):\n    if n == 1:\n        return arr[0]\n    \n    if arr[0] >= arr[1]:\n        return arr[0]\n    \n    if arr[n - 1] >= arr[n - 2]:\n        return arr[n - 1]\n    \n    for i in range(1, n - 1):\n        if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]:\n            return arr[i]\n    \n    return None\n\ntry:\n    print(find_peak([1, 3, 20, 4, 1, 0], 6))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_peak([2, 3, 4, 5, 6], 5))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_peak([8, 9, 11, 12, 14, 15], 6))\nexcept Exception as e:\n    print(e)\n\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5\ndef Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li \ndef Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") \ndef reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ", "func_error": "find_peak"}
{"code": "def add_pairwise(t):\n    return tuple(sum(pair) for pair in zip(*t))\n\ntry:\n    print(add_pairwise((1, 5, 7, 8, 10)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(add_pairwise((2, 6, 8, 9, 11)))\nexcept Exception as e:\n    print(e)\ntry:\n    print(add_pairwise((3, 7, 9, 10, 12)))\nexcept Exception as e:\n    print(e)\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\ndef rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result \nimport re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\ndef swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ", "func_error": "add_pairwise"}
{"code": "def find_remainder(arr, n, m):\n    result = 1\n    for number in arr:\n        result = (result * number) % n\n    return result % m\n\ntry:\n    print(find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_remainder([1,1,1],3,1))\nexcept Exception as e:\n    print(e)\ntry:\n    print(find_remainder([1,2,1],3,2))\nexcept Exception as e:\n    print(e)\n\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result\ndef even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False\ndef factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "func_error": "find_remainder"}
{"code": "def tuple_intersection(tuple_list1, tuple_list2):\n    set1 = set(tuple_list1)\n    set2 = set(tuple_list2)\n    intersection = set1.intersection(set2)\n    return intersection\n\ntry:\n    print(tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]))\nexcept Exception as e:\n    print(e)\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\ndef is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n\ndef is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)\ndef camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "func_error": "tuple_intersection"}
{"code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1])\n\ntry:\n    print(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}))\nexcept Exception as e:\n    print(e)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\ndef get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item\ndef Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n\nimport re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "func_error": "sort_counter"}
{"code": "def is_lower(str):\n    if not isinstance(str, str):\n        return 'invalid'\n    lower_str = str.lower()\n    if str == lower_str:\n        return 'true'\n    else:\n        return 'sentence'\n\ntry:\n    print(is_lower(\"InValid\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_lower(\"TruE\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(is_lower(\"SenTenCE\"))\nexcept Exception as e:\n    print(e)\n\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\ndef sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n\ndef sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result\ndef front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ", "func_error": "is_lower"}
{"code": "def remove_lowercase(input_str):\n    import re\n    return re.sub(r'\\b[a-z]+\\b', '', input_str).strip()\n\ntry:\n    print(remove_lowercase(\"PYTHon\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_lowercase(\"FInD\"))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_lowercase(\"STRinG\"))\nexcept Exception as e:\n    print(e)\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\nimport math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \ndef Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li \nimport re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "func_error": "remove_lowercase"}
{"code": "def first_Factorial_Divisible_Number(x):\n    import math\n    n = 1\n    while True:\n        if math.factorial(n) % x == 0:\n            return n\n        n += 1\n\ntry:\n    print(first_Factorial_Divisible_Number(10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_Factorial_Divisible_Number(15))\nexcept Exception as e:\n    print(e)\ntry:\n    print(first_Factorial_Divisible_Number(5))\nexcept Exception as e:\n    print(e)\n\nassert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4\ndef set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) \nfrom collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) \nimport re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "func_error": "first_Factorial_Divisible_Number"}
{"code": "def remove_matching_tuple(tuples1, tuples2):\n    return [t for t in tuples1 if t not in tuples2] + [t for t in tuples2 if t not in tuples1]\n\ntry:\n    print(remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]))\nexcept Exception as e:\n    print(e)\n\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\ndef last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)\ndef max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   \nimport re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "func_error": "remove_matching_tuple"}
{"code": "def extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    for a, b in tuple_list:\n        if (b, a) in tuple_list:\n            symmetric_pairs.add((a, b))\n    return symmetric_pairs\n\ntry:\n    print(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ))\nexcept Exception as e:\n    print(e)\n\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\ndef pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result\ndef is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False", "func_error": "extract_symmetric"}
{"code": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    return a * (1 - r**n) // (1 - r)\n\ntry:\n    print(sum_gp(1,5,2))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_gp(1,5,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(sum_gp(2,6,3))\nexcept Exception as e:\n    print(e)\n\nassert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728\ndef check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True\nfrom collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)\ndef check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "func_error": "sum_gp"}
{"code": "def calculate_polygons(rows, cols, size, offset_x, offset_y):\n    hexagons = []\n    for row in range(rows):\n        for col in range(cols):\n            x_offset = col * size * 1.5 + offset_x\n            y_offset = row * size * (3**0.5) + offset_y\n            if col % 2 == 1:\n                y_offset += size * (3**0.5) / 2\n            \n            hexagon = []\n            for i in range(6):\n                angle = i * (360 / 6)  # 60 degrees in radians\n                x = x_offset + size * (3**0.5 / 2) * (1 if i % 2 == 0 else -1) * (1 if i < 4 else 0)\n                y = y_offset + size * 0.5 * (1 if i % 2 == 1 else -1)\n                hexagon.append((x, y))\n            hexagons.append(hexagon)\n    return hexagons\n\ntry:\n    print(calculate_polygons(1,1, 4, 4, 3))\nexcept Exception as e:\n    print(e)\ntry:\n    print(calculate_polygons(5,4,7,9,8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(calculate_polygons(9,6,4,3,2))\nexcept Exception as e:\n    print(e)\n\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\ndef remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list\ndef tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) \ndef odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "func_error": "calculate_polygons"}
{"code": "def concatenate_elements(input_list):\n    result = ''.join(input_list)\n    return result\n\ntry:\n    print(concatenate_elements(['hello','there','have','a','rocky','day'] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ))\nexcept Exception as e:\n    print(e)\ntry:\n    print(concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ))\nexcept Exception as e:\n    print(e)\n\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\ndef rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v\ndef add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)\ndef dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "func_error": "concatenate_elements"}
{"code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n    \n    return gcd(a, b)\n\ntry:\n    print(num_comm_div(2,4))\nexcept Exception as e:\n    print(e)\ntry:\n    print(num_comm_div(2,8))\nexcept Exception as e:\n    print(e)\ntry:\n    print(num_comm_div(12,24))\nexcept Exception as e:\n    print(e)\n\nassert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6\ndef ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)\ndef maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]\ndef div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "func_error": "num_comm_div"}
{"code": "def same_order(list1, list2):\n    common_elements = [element for element in list1 if element in list2]\n    list1_indices = [list1.index(element) for element in common_elements]\n    list2_indices = [list2.index(element) for element in common_elements]\n    return list1_indices == list2_indices\n\ntry:\n    print(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"]))\nexcept Exception as e:\n    print(e)\ntry:\n    print(same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]))\nexcept Exception as e:\n    print(e)\n\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nfrom itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] \nimport math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) \ndef count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ", "func_error": "same_order"}
{"code": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    count = 0\n    \n    for i in range(1 << n):\n        product = 1\n        for j in range(n):\n            if i & (1 << j):\n                product *= arr[j]\n                if product >= k:\n                    break\n        if product < k:\n            count += 1\n            \n    return count\n\ntry:\n    print(no_of_subsequences([1,2,3,4], 10))\nexcept Exception as e:\n    print(e)\ntry:\n    print(no_of_subsequences([4,8,7,2], 50))\nexcept Exception as e:\n    print(e)\ntry:\n    print(no_of_subsequences([5,6,7,8], 15))\nexcept Exception as e:\n    print(e)\n\nassert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4\ndef min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") \ndef even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False\ndef add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "func_error": "no_of_subsequences"}
